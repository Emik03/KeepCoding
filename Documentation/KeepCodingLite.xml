<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KeepCodingLite</name>
    </assembly>
    <members>
        <member name="T:KeepCoding.Internal.ModuleScriptEditor">
            <summary>
            Custom inspector for <see cref="T:KeepCoding.ModuleScript"/>. 
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ModuleScriptEditor.OnInspectorGUI">
            <summary>
            Creates the colorblind button.
            </summary>
        </member>
        <member name="T:KeepCoding.Internal.TPScriptEditor">
            <summary>
            Custom inspector for <see cref="T:KeepCoding.TPScript`1"/>. 
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.TPScriptEditor.OnInspectorGUI">
            <summary>
            Creates the force solve buttons.
            </summary>
        </member>
        <member name="T:KeepCoding.Internal.AssertionException">
            <summary>
            An exception thrown when an assertion fails.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.AssertionException.#ctor">
            <summary>
            An exception thrown when an assertion fails.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.AssertionException.#ctor(System.String)">
            <summary>
            An exception thrown when an assertion fails.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when an assertion fails.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.AssertionException.#ctor(System.String,System.Object,System.Object)">
            <summary>
            An exception thrown when an assertion fails.
            </summary>
            <param name="name">The name of the received value.</param>
            <param name="received">The received value.</param>
            <param name="expected">The value of the expected value.</param>
        </member>
        <member name="T:KeepCoding.Internal.ConstructorArgumentException">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ConstructorArgumentException.#ctor">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ConstructorArgumentException.#ctor(System.String)">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.ConstructorArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.Internal.EmptyIteratorException">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.EmptyIteratorException.#ctor">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.EmptyIteratorException.#ctor(System.String)">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.EmptyIteratorException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.Internal.ImmutableException">
            <summary>
            An exception thrown when a mutable action is performed on an immutable member.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ImmutableException.#ctor">
            <summary>
            An exception thrown when a mutable action is performed on an immutable member.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ImmutableException.#ctor(System.String)">
            <summary>
            An exception thrown when a mutable action is performed on an immutable member.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.ImmutableException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when a mutable action is performed on an immutable member.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.Internal.KeepCodingException">
            <summary>
            An exception that is declared from the Keep Coding library.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.KeepCodingException.#ctor">
            <summary>
            An exception that is declared from the Keep Coding library.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.KeepCodingException.#ctor(System.String)">
            <summary>
            An exception that is declared from the Keep Coding library.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.KeepCodingException.#ctor(System.String,System.Exception)">
            <summary>
            An exception that is declared from the Keep Coding library.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.Internal.NegativeNumberException">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.NegativeNumberException.#ctor">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.NegativeNumberException.#ctor(System.String)">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.NegativeNumberException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.Internal.NullIteratorException">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.NullIteratorException.#ctor">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.NullIteratorException.#ctor(System.String)">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.NullIteratorException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.Internal.UnrecognizedTypeException">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.UnrecognizedTypeException.#ctor">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.UnrecognizedTypeException.#ctor(System.String)">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.UnrecognizedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.Internal.UnrecognizedValueException">
            <summary>
            An exception thrown for when the value isn't handled.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.UnrecognizedValueException.#ctor">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.UnrecognizedValueException.#ctor(System.String)">
            <summary>
            An exception thrown for when the value isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.Internal.UnrecognizedValueException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown for when the value isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.Internal.ModuleEvent`1">
            <summary>
            A class that encapsulates an adder, getter, remover, and setter, similar to a property.
            </summary>
            <typeparam name="T">The type of the inner variable on the getter.</typeparam>
        </member>
        <member name="T:KeepCoding.Internal.ModuleEvent`1.EventDictionary">
            <summary>
            A class that stores a dictionary, restricting what you are able to do.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.EventDictionary.#ctor">
            <summary>
            Creates a new instance of <see cref="T:KeepCoding.Internal.ModuleEvent`1.EventDictionary"/>, setting the inner dictionary to a new instance.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.EventDictionary.Add(`0,System.Object)">
            <summary>
            Adds a key with a value to the dictionary.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.EventDictionary.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.EventDictionary.Get(`0)">
            <summary>
            Gets the value from the specified key. If the key doesn't exist, <see langword="null"/> is returned.
            </summary>
            <param name="key">The key to use.</param>
            <returns>The value from the key, or <see langword="null"/>.</returns>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.EventDictionary.Remove(`0)">
            <summary>
            Removes a key from the dictionary. If the key doesn't exist, nothing happens.
            </summary>
            <param name="key">The key to use.</param>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.#ctor(KeepCoding.Internal.ModuleEvent{`0}.Adder,KeepCoding.Internal.ModuleEvent{`0}.Getter,KeepCoding.Internal.ModuleEvent{`0}.Remover,KeepCoding.Internal.ModuleEvent{`0}.Setter,KeepCoding.Internal.ModuleEvent{`0}.Signature,KeepCoding.Internal.ModuleEvent{`0}.Converter)">
            <summary>
            Creates a <see langword="new"/> instance of <see cref="T:KeepCoding.Internal.ModuleEvent`1"/> with the underlying type passed in.
            </summary>
            <param name="adder">The encapsulated method that will add an event.</param>
            <param name="getter">The encapsulated method that will get the value.</param>
            <param name="setter">The encapsulated method that will set the value.</param>
            <param name="signature">The encapsulated method that will get the <see cref="T:System.Type"/> of the target.</param>
            <param name="remover">The encapsulated method that will remove the value.</param>
            <param name="converter">The encapsulated method that changes the value before used in converting types.</param>
        </member>
        <member name="T:KeepCoding.Internal.ModuleEvent`1.Adder">
            <summary>
            Represents an adder operator.
            </summary>
            <param name="value">The value to use.</param>
        </member>
        <member name="T:KeepCoding.Internal.ModuleEvent`1.Remover">
            <summary>
            Represents the remover operator.
            </summary>
            <param name="value">The value to use.</param>
        </member>
        <member name="T:KeepCoding.Internal.ModuleEvent`1.Setter">
            <summary>
            Represents a setter operator.
            </summary>
            <param name="value">The value to use.</param>
        </member>
        <member name="T:KeepCoding.Internal.ModuleEvent`1.Converter">
            <summary>
            Converts the delegate to a different type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The value converted to something else from <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:KeepCoding.Internal.ModuleEvent`1.Signature">
            <summary>
            Gets the <see cref="T:System.Type"/> of the target.
            </summary>
            <returns>The <see cref="T:System.Type"/> of the target.</returns>
        </member>
        <member name="T:KeepCoding.Internal.ModuleEvent`1.Getter">
            <summary>
            Represents a getter operator.
            </summary>
            <returns>The value from the operation.</returns>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.Add(`0)">
            <summary>
            Subscribes an event to the inner value.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.Set(`0)">
            <summary>
            Sets the event to the inner value.
            </summary>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.Get">
            <summary>
            Gets the value of the inner value.
            </summary>
            <returns>The returned value of the <see cref="T:KeepCoding.Internal.ModuleEvent`1.Getter"/>.</returns>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.Remove(`0)">
            <summary>
            The remover operator.
            </summary>
            <param name="value">The value to use.</param>
        </member>
        <member name="M:KeepCoding.Internal.ModuleEvent`1.op_Implicit(KeepCoding.Internal.ModuleEvent{`0})~`0">
            <summary>
            Implicitly uses the getter.
            </summary>
            <param name="moduleEvent">The instance of this type to convert.</param>
        </member>
        <member name="T:KeepCoding.EventHelper">
            <summary>
            KMFramework extension methods that makes it easier to assign multiple events to a variable in one statement.
            </summary>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMBombInfo,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="bombInfo"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="bombInfo">The bomb info instance to assign events to.</param>
            <param name="onBombExploded">Called when the bomb explodes.</param>
            <param name="onBombSolved">Called when the bomb is defused.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMBombModule,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="bombModule"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <param name="bombModule">The bomb instance to assign events to.</param>
            <param name="onActivate">Called when the lights turn on.</param>
            <param name="onPass">Called when the module is solved.</param>
            <param name="onStrike">Called when the module strikes.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMGameInfo,System.Action{KMGameInfo.State},System.Action{System.Boolean},System.Action{System.Boolean})">
            <summary>
            Assigns events specified into <paramref name="gameInfo"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="gameInfo">The game info instance to assign events to.</param>
            <param name="onStateChange">Called when the state of the game changes.</param>
            <param name="onAlarmClockChange">Called when the alarm clock changes state, and passes in whether it's on or off.</param>
            <param name="onLightsChange">Called when the lights change state, and passes in whether it's on or off.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMNeedyModule,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="needyModule"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <param name="needyModule">The needy instance to assign events to.</param>
            <param name="onActivate">Called when the lights turn on.</param>
            <param name="onNeedyActivation">Called when the needy activates.</param>
            <param name="onNeedyDeactivation">Called when the needy deactivates.</param>
            <param name="onPass">Called when the needy is solved.</param>
            <param name="onStrike">Called when the needy strikes.</param>
            <param name="onTimerExpired">Called when the timer runs out of time.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMSelectable,System.Nullable{System.Boolean},System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action{System.Single},System.Action,System.Action,System.Action,System.Action{KMSelectable})">
            <summary>
            Assigns events specified into <paramref name="selectable"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="selectable">The KMSelectable array to add events to.</param>
            <param name="overrideReturn">True will make it act as a module/submodule, and false as a button. Null (default) will set it to true or false based on <see cref="M:KeepCoding.Helper.IsParent(KMSelectable)"/>. Note that in VR, <see cref="F:KMSelectable.OnHighlight"/> and <see cref="F:KMSelectable.OnHighlightEnded"/> are skipped out on.</param>
            <param name="onCancel">Called when player backs out of this selectable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off.</param>
            <param name="onInteract">Called when player interacts with the selctable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onInteractionPunch">Called when the interaction punch method is called.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
            <param name="onUpdateChildren">Called when the selectable updates its children.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign``1(``0,System.Nullable{System.Boolean},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32,System.Single},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32,KMSelectable})">
            <summary>
            Assigns events specified into <paramref name="selectables"/>. Reassigning them will replace their values. The number passed into each method represents the index that came from the array.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="selectables">The <see cref="T:KMSelectable"/> array to add events to.</param>
            <param name="overrideReturn">True will make it act as a module/submodule, and false as a button. Null (default) will set it to true or false based on <see cref="M:KeepCoding.Helper.IsParent(KMSelectable)"/>. Note that in VR, <see cref="F:KMSelectable.OnHighlight"/> and <see cref="F:KMSelectable.OnHighlightEnded"/> are skipped out on.</param>
            <param name="onCancel">Called when player backs out of this selectable.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off.</param>
            <param name="onInteract">Called when player interacts with the selctable.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onInteractionPunch">Called when the interaction punch method is called.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
            <param name="onUpdateChildren">Called when the selectable updates its children.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign``1(``0,System.Nullable{System.Boolean},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable,System.Single},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable,KMSelectable})">
            <summary>
            Assigns events specified into <paramref name="selectables"/>. Reassigning them will replace their values. The number passed into each method represents the index that came from the array.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="selectables">The <see cref="T:KMSelectable"/> array to add events to.</param>
            <param name="overrideReturn">True will make it act as a module/submodule, and false as a button. Null (default) will set it to true or false based on <see cref="M:KeepCoding.Helper.IsParent(KMSelectable)"/>. Note that in VR, <see cref="F:KMSelectable.OnHighlight"/> and <see cref="F:KMSelectable.OnHighlightEnded"/> are skipped out on.</param>
            <param name="onCancel">Called when player backs out of this selectable.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off.</param>
            <param name="onInteract">Called when player interacts with the selctable.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onInteractionPunch">Called when the interaction punch method is called.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
            <param name="onUpdateChildren">Called when the selectable updates its children.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.StopSounds``1(``0)">
            <summary>
            Stops all sounds for the entire <see cref="T:KMAudio.KMAudioRef"/> <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of iterator containing <see cref="T:KMAudio.KMAudioRef"/>.</typeparam>
            <param name="audioRefs">The <see cref="T:KMAudio.KMAudioRef"/> <see cref="T:System.Array"/> to mute all sounds from, using <see cref="F:KMAudio.KMAudioRef.StopSound"/>.</param>
        </member>
        <member name="T:KeepCoding.Helper">
            <summary>
            General extension class.
            </summary>
        </member>
        <member name="M:KeepCoding.Helper.IsBetween(System.Char,System.Char,System.Char)">
            <summary>
            Determines whether the number is equal or in-between 2 values.
            </summary>
            <param name="comparison">The number to use as comparison.</param>
            <param name="min">The minimum value required to return <see langword="true"/>.</param>
            <param name="max">The maximum value required to return <see langword="true"/>.</param>
            <returns>True if <paramref name="comparison"/> is more than or equal <paramref name="min"/> and less than or equal <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the number is equal or in-between 2 values.
            </summary>
            <param name="comparison">The number to use as comparison.</param>
            <param name="min">The minimum value required to return <see langword="true"/>.</param>
            <param name="max">The maximum value required to return <see langword="true"/>.</param>
            <returns>True if <paramref name="comparison"/> is more than or equal <paramref name="min"/> and less than or equal <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsBetween(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the number is equal or in-between 2 values.
            </summary>
            <param name="comparison">The number to use as comparison.</param>
            <param name="min">The minimum value required to return <see langword="true"/>.</param>
            <param name="max">The maximum value required to return <see langword="true"/>.</param>
            <returns>True if <paramref name="comparison"/> is more than or equal <paramref name="min"/> and less than or equal <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is null or empty.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for.</param>
            <returns>True if <paramref name="source"/> is equal to null, or empty.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToNumber(System.Char)">
            <summary>
            Converts a character to a number.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToLower(System.Char)">
            <summary>
            Converts a character to lowercase.
            </summary>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as lowercase.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToUpper(System.Char)">
            <summary>
            Converts a character to uppercase.
            </summary>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as uppercase.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Modulo(System.Int32,System.Int32)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <exception cref="T:System.DivideByZeroException"></exception>
            <param name="number">The left-hand side operator</param>
            <param name="modulo">The right-hand side operator.</param>
            <returns><paramref name="number"/> mod <paramref name="modulo"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToNumbers``1(``0[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Parses each element of an array into a number. If it succeeds it returns the integer array, if it fails then it returns null.
            </summary>
            <param name="ts">The array to convert to an integer.</param>
            <param name="min">The minimum acceptable value of any given index. (inclusive)</param>
            <param name="max">The maximum acceptable value of any given index. (inclusive)</param>
            <param name="minLength">The minimum acceptable length of the array. (inclusive)</param>
            <param name="maxLength">The maximum acceptable length of the array. (inclusive)</param>
            <returns>The array as integers, or null if it fails.</returns>
        </member>
        <member name="M:KeepCoding.Helper.BaseToLong(System.String,System.Int32)">
            <summary>
            Converts any base number to any base-10.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseNumber">Which base it currently is.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.BaseToLong(System.String,System.String)">
            <summary>
            Converts any base number to base-10.
            </summary>
            <exception cref="T:System.FormatException"></exception>
            <param name="value">The value to convert.</param>
            <param name="baseChars">All of the base characters for the conversion from the base number, use <see cref="F:KeepCoding.Helper.Alphanumeric"/> for Base-62. The length of the array is the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Modulo(System.Single,System.Single)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <exception cref="T:System.DivideByZeroException"></exception>
            <param name="number">The left-hand side operator</param>
            <param name="modulo">The right-hand side operator.</param>
            <returns><paramref name="number"/> mod <paramref name="modulo"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Base(System.String,System.String,System.String)">
            <summary>
            Converts any base number to any base.
            </summary>a
            <param name="value">The value to convert.</param>
            <param name="fromBaseChars">All of the base characters for the conversion from the base number.</param>
            <param name="toBaseChars">All of the base characters for the conversion to the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Base(System.String,System.Int32,System.Int32)">
            <summary>
            Converts any base number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="fromBaseNumber">Which base it currently is.</param>
            <param name="toBaseNumber">Which base to convert it to.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Combine``1(``0,System.String)">
            <summary>
            Conbines the iterator into one long <see cref="T:System.String"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="source"/>.</typeparam>
            <param name="source">The iterator.</param>
            <param name="delimiter">The separator between each element.</param>
            <returns>A <see cref="T:System.String"/> representing all elements in <paramref name="source"/> with the separator <paramref name="delimiter"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.InsertNewlines(System.String,System.Int32)">
            <summary>
            Replaces whitespace characters with line breaks based on the line length.
            </summary>
            <remarks>
            This can be useful to prevent a <see cref="T:UnityEngine.TextMesh"/> from going outside its boundaries. A monospaced font is recommended in this case.
            </remarks>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:KeepCoding.Internal.NegativeNumberException"></exception>
            <param name="condition">The string to insert line breaks with.</param>
            <param name="maxLineLength">The maximum number of characters in one line.</param>
            <returns><paramref name="condition"/> with a line break every <paramref name="maxLineLength"/> or less characters.</returns>
        </member>
        <member name="M:KeepCoding.Helper.LongToBase(System.Int64,System.String)">
            <summary>
            Converts any base-10 number to any base.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="value">The value to convert.</param>
            <param name="baseChars">All of the base characters for the conversion to the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.LongToBase(System.Int64,System.Int32)">
            <summary>
            Converts any base-10 number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseNumber">Which base to convert it to.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Reverse(System.String)">
            <summary>
            Reverses a string.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
            <param name="source">The string to reverse.</param>
            <returns><paramref name="source"/> where contents are oredered backwards.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Stringify``1(``0,KeepCoding.StringifyFormat)">
            <summary>
            Converts <paramref name="source"/> into a <see cref="T:System.String"/> representation of <paramref name="source"/>.
            </summary>
            <remarks>
            Unlike <see cref="M:System.Object.ToString"/>, the individual items inside <paramref name="source"/> if it is an iterator is deconstructed.
            </remarks>
            <typeparam name="T">The format of the string.</typeparam>
            <param name="source">The item to represent as a <see cref="T:System.String"/></param>
            <param name="format">Determines how it is formatted.</param>
            <returns><paramref name="source"/> as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToOrdinal(System.Int32)">
            <summary>
            Converts a number to the ordinal as <see cref="T:System.String"/>.
            </summary>
            <param name="i">The number to convert to an ordinal.</param>
            <returns><paramref name="i"/> as an ordinal. (<see cref="T:System.String"/>)</returns>
        </member>
        <member name="M:KeepCoding.Helper.Stop(UnityEngine.MonoBehaviour,UnityEngine.Coroutine[])">
            <summary>
            Stops the coroutines only if they aren't <see langword="null"/>.
            </summary>
            <param name="monoBehaviour">The <see cref="T:UnityEngine.MonoBehaviour"/> instance needed to stop coroutines.</param>
            <param name="coroutines">The <see cref="T:UnityEngine.Coroutine"/>s to stop.</param>
            <returns>The array of <see cref="T:UnityEngine.Coroutine"/>s given.</returns>
        </member>
        <member name="M:KeepCoding.Helper.AsEnumerable(System.Collections.IEnumerator)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerator"/> to an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="source">The <see cref="T:System.Collections.IEnumerator"/> to convert.</param>
            <returns><paramref name="source"/> as an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Range(System.Int32)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> spanning from 0 to the number specified - 1.
            </summary>
            <param name="count">The length of the <see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> from 0 to <paramref name="count"/> - 1.</returns>
        </member>
        <member name="M:KeepCoding.Helper.AsEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerator"/> to an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <typeparam name="T">The parameter and return type.</typeparam>
            <param name="source">The <see cref="T:System.Collections.IEnumerator"/> to convert.</param>
            <returns><paramref name="source"/> as an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Indistinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, only allowing duplicated items.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter through.</param>
            <returns>A new instance of <paramref name="source"/> that only includes elements which are repeated in the array.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles a collection of items using <see cref="T:UnityEngine.Random"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Collections.Generic.IEnumerable`1"/> to shuffle.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to shuffle.</param>
            <returns><paramref name="source"/> in a random order.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Randomize``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffles a collection of items using a specified <see cref="T:System.Random"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Collections.Generic.IEnumerable`1"/> to shuffle.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to shuffle.</param>
            <param name="rng">The <see cref="T:System.Random"/> to generate numbers by.</param>
            <returns><paramref name="source"/> in a random order.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Randomize``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,System.Int32,System.Int32})">
            <summary>
            Shuffles a collection of items using a user-specified algorithm.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Collections.Generic.IEnumerable`1"/> to shuffle.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to shuffle.</param>
            <param name="randomizer">The method to take the current and maximum indices, and return a new number to swap the current with.</param>
            <returns><paramref name="source"/> in a random order.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Repeat``1(System.Int32,System.Func{``0})">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where each element is the return of a <see cref="T:System.Func`1"/>.
            </summary>
            <exception cref="T:KeepCoding.Internal.NegativeNumberException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of the <see cref="T:System.Func`1"/> as well as the return.</typeparam>
            <param name="times">The amount of times to run the method.</param>
            <param name="func">The encapsulated method to return for each value.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of length <paramref name="times"/> where each element is the return of <paramref name="func"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Repeat``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where each element gets passed in an <see cref="T:System.Int32"/> in <see cref="T:System.Func`2"/> and returns <typeparamref name="T"/>.
            </summary>
            <exception cref="T:KeepCoding.Internal.NegativeNumberException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of the <see cref="T:System.Func`1"/> as well as the return.</typeparam>
            <param name="times">The amount of times to run the method.</param>
            <param name="func">The encapsulated method to return for each value, passing in the index of the for-loop.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of length <paramref name="times"/> where each element is the return of <paramref name="func"/> after the index is passed in.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Flatten(System.Collections.IEnumerator,System.Predicate{System.Collections.IEnumerator})">
            <summary>
            Flattens an <see cref="T:System.Collections.IEnumerator"/> such that nested <see cref="T:System.Collections.IEnumerator"/> calls get replaced with the output of those calls.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerator"/> to flatten.</param>
            <param name="except">If <see langword="false"/>, <see cref="M:KeepCoding.Helper.Flatten(System.Collections.IEnumerator,System.Predicate{System.Collections.IEnumerator})"/> gets called recursively and each item from that output gets returned individually, otherwise the item is simply returned.</param>
            <returns><paramref name="source"/> where <see langword="yield"/> <see langword="return"/> <see cref="T:System.Collections.IEnumerator"/>s gets replaced with the output of those calls.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetUnsolvedModuleIDs(KMBombInfo)">
            <summary>
            Gives list of module names that are unsolved.
            </summary>
            <param name="bombInfo">The instance of <see cref="T:KMBombInfo"/> needed to get the modules.</param>
            <returns>A list of unsolved module names.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetUnsolvedModuleNames(KMBombInfo)">
            <summary>
            Gives list of module names that are unsolved.
            </summary>
            <param name="bombInfo">The instance of <see cref="T:KMBombInfo"/> needed to get the modules.</param>
            <returns>A list of unsolved modules.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Assert``1(``0)">
            <summary>
            Throws am <see cref="T:KeepCoding.Internal.AssertionException"/> if the <see cref="T:UnityEngine.Object"/> given is <see langword="null"/>, then returning the <see cref="T:UnityEngine.Object"/> <paramref name="obj"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:UnityEngine.Object"/>.</typeparam>
            <param name="obj">The <see cref="T:UnityEngine.Object"/> to do a <see langword="null"/> check on.</param>
            <returns><paramref name="obj"/></returns>
        </member>
        <member name="M:KeepCoding.Helper.Assert``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:KeepCoding.Internal.AssertionException"/> if the argument passed in is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the item to assert for non-nullability.</typeparam>
            <param name="item">The item to use a <see langword="null"/> check on.</param>
            <param name="name">The name of <paramref name="item"/>.</param>
            <returns><paramref name="item"/></returns>
        </member>
        <member name="M:KeepCoding.Helper.Assert``1(``0,System.Predicate{``0},System.String,System.String)">
            <summary>
            Throws an <see cref="T:KeepCoding.Internal.AssertionException"/> if the method passed in <see langword="return"/>s <see langword="false"/>.
            </summary>
            <typeparam name="T">The type of the initial comparison.</typeparam>
            <param name="item">The item to pass into the method.</param>
            <param name="assertion">The assertion, <see langword="true"/> indicates success and will <see langword="return"/> <paramref name="item"/>, <see langword="false"/> will throw an <see cref="T:KeepCoding.Internal.AssertionException"/>.</param>
            <param name="name">The name of <paramref name="item"/>.</param>
            <param name="expect">The string representation of what <paramref name="assertion"/> does and expects.</param>
            <returns><paramref name="item"/></returns>
        </member>
        <member name="M:KeepCoding.Helper.Assert``2(``0,``1,System.String)">
            <summary>
            Throws an <see cref="T:KeepCoding.Internal.AssertionException"/> if both arguments passed in <see langword="return"/> <see langword="false"/> on <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <typeparam name="T">The type of the initial comparison.</typeparam>
            <typeparam name="TOther">The type of the item to compare.</typeparam>
            <param name="item">The item to use as comparison.</param>
            <param name="comparison">The item to compare to.</param>
            <param name="name">The name of <paramref name="item"/>.</param>
            <returns><paramref name="item"/></returns>
        </member>
        <member name="M:KeepCoding.Helper.Call``1(``0,System.Action{``0})">
            <summary>
            Invokes a method of <typeparamref name="T"/> and then returns the argument provided.
            </summary>
            <remarks>
            This can be used to intercept current variables or calculations by for example, printing the value as it is being passed as an argument.
            </remarks>
            <typeparam name="T">The type of <paramref name="item"/> and <paramref name="action"/>.</typeparam>
            <param name="item">The item to use as reference and modify.</param>
            <param name="action">The action to apply <paramref name="item"/> to.</param>
            <returns>The item <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Call``1(``0,UnityEngine.LogType)">
            <summary>
            Invokes a logging method and then returns the argument provided.
            </summary>
            <typeparam name="T">The type of logging.</typeparam>
            <param name="item">The item to log</param>
            <param name="logType">The type of logging.</param>
            <returns>The item <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ElementAtWrap``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element of an array, pretending that the array wraps around or is circular.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="source">The array itself.</param>
            <param name="index">The index, which will wrap around if it's larger than the array.</param>
            <returns>The element in <paramref name="source"/> using <paramref name="index"/> with rem-euclid modulo.</returns>
        </member>
        <member name="M:KeepCoding.Helper.NullOrEmptyCheck``1(``0,System.String)">
            <summary>
            Throws an exception if the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is null or empty.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <param name="source">The <see cref="T:System.Array"/> to check for null and empty.</param>
            <param name="message">The optional message to throw if null or empty. Leaving it default will throw a default message.</param>
        </member>
        <member name="M:KeepCoding.Helper.NullOrEmptyCheck``1(System.Nullable{``0},System.String)">
            <summary>
            Throws an exception if the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is null or empty.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <param name="source">The <see cref="T:System.Array"/> to check for null and empty.</param>
            <param name="message">The optional message to throw if null or empty. Leaving it default will throw a default message.</param>
        </member>
        <member name="M:KeepCoding.Helper.Apply``2(``0,System.Func{``0,``1})">
            <summary>
            Invokes a method of <typeparamref name="T"/> to <typeparamref name="TResult"/> and then returns the argument provided.
            </summary>
            <remarks>
            This can be used to intercept current variables or calculations by for example, printing the value as it is being passed as an argument.
            </remarks>
            <typeparam name="T">The type of <paramref name="item"/>.</typeparam>
            <typeparam name="TResult">The type to return.</typeparam>
            <param name="item">The item to use as reference and modify.</param>
            <param name="func">The function to apply <paramref name="item"/> to.</param>
            <returns>The item <paramref name="item"/> after <paramref name="func"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetValues``1">
            <summary>
            Gets all the values of an <see cref="T:System.Enum"/> as an <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Enum"/>.</typeparam>
            <returns>An <see cref="T:System.Array"/> of <typeparamref name="T"/> containing all the values of that enum.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetValues``1(``0)">
            <summary>
            Gets all the values of an <see cref="T:System.Enum"/> as an <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Enum"/>.</typeparam>
            <param name="_">A discard value, which can implicitly let the method know the type.</param>
            <returns>An <see cref="T:System.Array"/> of <typeparamref name="T"/> containing all the values of that enum.</returns>
        </member>
        <member name="M:KeepCoding.Helper.SetOrReplace``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1,``1})">
            <summary>
            Sets or replaces the value of a dictionary with a given function.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="TKey">Type of the key of the dictionary.</typeparam>
            <typeparam name="TValue">Type of the value of the dictionary.</typeparam>
            <param name="source">Dictionary to operate on.</param>
            <param name="key">Key at which the list is located in the dictionary.</param>
            <param name="func">The function that returns the new value.</param>
            <returns>The new value at the specified key.</returns>
        </member>
        <member name="T:KeepCoding.KeyHelper">
            <summary>
            Inline methods for when typically key words are used.
            </summary>
        </member>
        <member name="M:KeepCoding.KeyHelper.For(System.Int32,System.Action)">
            <summary>
            The <see langword="for"/> statement executes a statement or a block of statements while a specified Boolean expression evaluates to <see langword="true"/>.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <param name="length">The length to reach to in the for loop.</param>
            <param name="action">The action for each loop.</param>
            <returns><paramref name="length"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.For(System.Int32,System.Action{System.Int32})">
            <summary>
            The <see langword="for"/> statement executes a statement or a block of statements while a specified Boolean expression evaluates to <see langword="true"/>.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <param name="length">The length to reach to in the for loop.</param>
            <param name="action">The action for each loop.</param>
            <returns><paramref name="length"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.For``1(System.Int32,System.Func{``0})">
            <summary>
            The <see langword="for"/> statement executes a statement or a block of statements while a specified Boolean expression evaluates to <see langword="true"/>.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <param name="length">The length to reach to in the for loop.</param>
            <param name="func">The function for each loop.</param>
            <returns>All instances that <paramref name="func"/> used in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.For``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            The <see langword="for"/> statement executes a statement or a block of statements while a specified Boolean expression evaluates to <see langword="true"/>.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <param name="length">The length to reach to in the for loop.</param>
            <param name="func">The function for each loop.</param>
            <returns>All instances that <paramref name="func"/> used in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            The <see langword="foreach"/> statement executes a statement or a block of statements for each element in an instance of the type that implements the <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of iterator.</typeparam>
            <param name="iterator">The collection of items to go through one-by-one.</param>
            <param name="action">The action to do on each item in <paramref name="iterator"/>.</param>
            <returns><paramref name="iterator"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.ForEach``2(``0,System.Action{``1})">
            <summary>
            The <see langword="foreach"/> statement executes a statement or a block of statements for each element in an instance of the type that implements the <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="TEnumerable">The type of iterator.</typeparam>
            <typeparam name="TCurrent">The type of each item in the iterator.</typeparam>
            <param name="iterator">The collection of items to go through one-by-one.</param>
            <param name="action">The action to do on each item in <paramref name="iterator"/>.</param>
            <returns><paramref name="iterator"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.ForEach``3(``0,System.Action{``1,``2})">
            <summary>
            The <see langword="foreach"/> statement executes a statement or a block of statements for each element in an instance of the type that implements the <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="TDictionary">The type of iterator.</typeparam>
            <typeparam name="TKey">The type of each key in the iterator.</typeparam>
            <typeparam name="TValue">The type of each value in the iterator.</typeparam>
            <param name="iterator">The collection of items to go through one-by-one.</param>
            <param name="action">The action to do on each item in <paramref name="iterator"/>.</param>
            <returns><paramref name="iterator"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            The <see langword="foreach"/> statement executes a statement or a block of statements for each element in an instance of the type that implements the <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of iterator.</typeparam>
            <param name="iterator">The collection of items to go through one-by-one.</param>
            <param name="action">The action to do on each item in <paramref name="iterator"/>.</param>
            <returns><paramref name="iterator"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.ForEach``2(``0,System.Action{``1,System.Int32})">
            <summary>
            The <see langword="foreach"/> statement executes a statement or a block of statements for each element in an instance of the type that implements the <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="TEnumerable">The type of iterator.</typeparam>
            <typeparam name="TCurrent">The type of each item in the iterator.</typeparam>
            <param name="iterator">The collection of items to go through one-by-one.</param>
            <param name="action">The action to do on each item in <paramref name="iterator"/>.</param>
            <returns><paramref name="iterator"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.ForEach``3(``0,System.Action{``1,``2,System.Int32})">
            <summary>
            The <see langword="foreach"/> statement executes a statement or a block of statements for each element in an instance of the type that implements the <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="TDictionary">The type of iterator.</typeparam>
            <typeparam name="TKey">The type of each key in the iterator.</typeparam>
            <typeparam name="TValue">The type of each value in the iterator.</typeparam>
            <param name="iterator">The collection of items to go through one-by-one.</param>
            <param name="action">The action to do on each item in <paramref name="iterator"/>.</param>
            <returns><paramref name="iterator"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.ForEachBoxed``1(``0,System.Action{System.Object})">
            <summary>
            The <see langword="foreach"/> statement executes a statement or a block of statements for each element in an instance of the type that implements the <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="TEnumerable">The type of iterator.</typeparam>
            <param name="iterator">The collection of items to go through one-by-one.</param>
            <param name="action">The action to do on each item in <paramref name="iterator"/>.</param>
            <returns><paramref name="iterator"/></returns>
        </member>
        <member name="M:KeepCoding.KeyHelper.ForEachBoxed``1(``0,System.Action{System.Object,System.Int32})">
            <summary>
            The <see langword="foreach"/> statement executes a statement or a block of statements for each element in an instance of the type that implements the <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement"/>
            </remarks>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="TEnumerator">The type of iterator.</typeparam>
            <param name="iterator">The collection of items to go through one-by-one.</param>
            <param name="action">The action to do on each item in <paramref name="iterator"/>.</param>
            <returns><paramref name="iterator"/></returns>
        </member>
        <member name="T:KeepCoding.TypeHelper">
            <summary>
            Extension methods to help you create data types easier.
            </summary>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> from the current <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="source"/> and <see langword="return"/>.</typeparam>
            <param name="source">The collection to turn into a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> with values of <paramref name="source"/>.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToVersion(System.String)">
            <summary>
            Converts argument to a new <see cref="T:System.Version"/>. Major-only versions are compatible.
            </summary>
            <param name="s">The string to convert to a version.</param>
            <returns>A new <see cref="T:System.Version"/> representing the input <paramref name="s"/>.</returns>
        </member>
        <member name="T:KeepCoding.ModConfig`1">
            <summary>
            Meant for information that needs to be deserialized within the mod settings folder, by samfundev.
            </summary>
            <remarks>
            <see href="https://github.com/Qkrisi/ktanemodkit/blob/master/Assets/Scripts/ModConfig.cs"/>
            </remarks>
            <typeparam name="TSerialize">The type to serialize and deserialize the file.</typeparam>
        </member>
        <member name="M:KeepCoding.ModConfig`1.#ctor">
            <summary>
            Creates a new <see cref="T:KeepCoding.ModConfig`1"/> with the target file name and an optional event of when the file is read.
            </summary>
            <exception cref="T:KeepCoding.Internal.ConstructorArgumentException"></exception>
        </member>
        <member name="M:KeepCoding.ModConfig`1.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:KeepCoding.ModConfig`1"/> with the target file name and an optional event of when the file is read.
            </summary>
            <exception cref="T:KeepCoding.Internal.ConstructorArgumentException"></exception>
            <param name="fileName">The file name to get.</param>
        </member>
        <member name="P:KeepCoding.ModConfig`1.HasReadSucceeded">
            <summary>
            Whether or not there has been a successful read of the settings file.
            </summary>
        </member>
        <member name="M:KeepCoding.ModConfig`1.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCoding.ModConfig`1.Log``1(``0,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="M:KeepCoding.ModConfig`1.Merge(`0,System.Boolean)">
            <summary>
            Reads, merges, and writes the settings to the settings file. To protect the user settings, this does nothing if the read isn't successful.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
            <param name="value">The value to merge the file with.</param>
            <param name="isDiscarding">Determines whether it should remove values from the original file that isn't contained within the type, or has the incorrect type.</param>
        </member>
        <member name="M:KeepCoding.ModConfig`1.Write(`0)">
            <summary>
            Writes the settings to the settings file. To protect the user settings, this does nothing if the last read wasn't successful.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
            <param name="value">The value to overwrite the settings file with.</param>
        </member>
        <member name="M:KeepCoding.ModConfig`1.Write(System.String)">
            <summary>
            Writes the string to the settings file. To protect the user settings, this does nothing if the last read wasn't successful.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="value">The contents to write.</param>
        </member>
        <member name="M:KeepCoding.ModConfig`1.SerializeSettings(`0)">
            <summary>
            Serializes settings the same way it's written to the file. Supports settings that use enums.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:KeepCoding.ModConfig`1.ToString">
            <summary>
            Deserializes, then reserializes the file according to <see cref="M:KeepCoding.ModConfig`1.SerializeSettings(`0)"/>.
            </summary>
            <returns>A string representation of the value from <see cref="M:KeepCoding.ModConfig`1.Read"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModConfig`1.Read">
            <summary>
            Reads the settings from the settings file. If the settings couldn't be read, the default settings will be returned.
            </summary>
        </member>
        <member name="T:KeepCoding.MonoRandom">
            <summary>
            A pseudo-random number generator that is primarily used to get multiple platforms to share the same random number generator.
            </summary>
        </member>
        <member name="M:KeepCoding.MonoRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KeepCoding.MonoRandom"/> class, using a time-dependent default seed value.
            </summary>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:KeepCoding.MonoRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Random"/> class, using the specified seed value.
            </summary>
            <exception cref="T:System.OverflowException"></exception>
            <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used.</param>
        </member>
        <member name="P:KeepCoding.MonoRandom.Seed">
            <summary>
            The seed used for the randomization.
            </summary>
        </member>
        <member name="M:KeepCoding.MonoRandom.NextBytes(System.Byte[],System.Boolean)">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <param name="isLogging">Determines whether it should log the result.</param>
        </member>
        <member name="M:KeepCoding.MonoRandom.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCoding.MonoRandom.Log``1(``0,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="M:KeepCoding.MonoRandom.Next(System.Boolean)">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
            <param name="isLogging">Determines whether it should log the result.</param>
        </member>
        <member name="M:KeepCoding.MonoRandom.Next(System.Int32,System.Boolean)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to zero.</param>
            <param name="isLogging">Determines whether it should log the result.</param>
            <returns>A 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes zero but not <paramref name="maxValue" />. However, if <paramref name="maxValue" /> equals zero, <paramref name="maxValue" /> is returned.</returns>
        </member>
        <member name="M:KeepCoding.MonoRandom.Next(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.</param>
            <param name="isLogging">Determines whether it should log the result.</param>
            <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</returns>
        </member>
        <member name="M:KeepCoding.MonoRandom.NextDouble(System.Boolean)">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <param name="isLogging">Determines whether it should log the result.</param>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:KeepCoding.MonoRandom.Sample(System.Boolean)">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <param name="isLogging">Determines whether it should log the result.</param>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:KeepCoding.MonoRandom.Shuffle``1(``0,System.Boolean)">
            <summary>
            Shuffles a list using an in-place algorithm; the original list is modified.
            </summary>
            <typeparam name="T">The type of list to shuffle.</typeparam>
            <param name="list">The list to shuffle.</param>
            <param name="isLogging">Determines whether it should log the result.</param>
            <returns><paramref name="list"/> shuffled using Fisher-Yates shuffle.</returns>
        </member>
        <member name="T:KeepCoding.ColorblindInfo">
            <summary>
            Contains information about the colorblind mod's info, this class can be used to deserialize "ColorblindMode.json".
            </summary>
        </member>
        <member name="M:KeepCoding.ColorblindInfo.#ctor">
            <summary>
            Creates a <see cref="T:KeepCoding.ColorblindInfo"/> without read/writing the file.
            </summary>
        </member>
        <member name="M:KeepCoding.ColorblindInfo.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:KeepCoding.ColorblindInfo"/> while read/writing the file.
            </summary>
            <param name="moduleId">The module's id to grab information from.</param>
        </member>
        <member name="P:KeepCoding.ColorblindInfo.IsEnabled">
            <summary>
            Determines whether colorblind mode is on.
            </summary>
        </member>
        <member name="P:KeepCoding.ColorblindInfo.IsModuleEnabled">
            <summary>
            Determines whether colorblind mode for the module is on.
            </summary>
        </member>
        <member name="P:KeepCoding.ColorblindInfo.Modules">
            <summary>
            Contains module ids and their colorblind states.
            </summary>
        </member>
        <member name="M:KeepCoding.ColorblindInfo.Equals(System.Object)">
            <summary>
            Determines if both objects are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>True if both of them are <see cref="T:KeepCoding.ColorblindInfo"/> and contain the same <see cref="P:KeepCoding.ColorblindInfo.IsEnabled"/> and <see cref="P:KeepCoding.ColorblindInfo.Modules"/>.</returns>
        </member>
        <member name="M:KeepCoding.ColorblindInfo.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCoding.ColorblindInfo.ToString">
            <summary>
            Converts the object to a string.
            </summary>
            <returns><see cref="P:KeepCoding.ColorblindInfo.Modules"/> unwrapped with <see cref="M:KeepCoding.Helper.Stringify``1(``0,KeepCoding.StringifyFormat)"/>.</returns>
        </member>
        <member name="T:KeepCoding.ComponentPool">
            <summary>
            A ComponentPool is a collection of Module Types. The generator will pick <see cref="P:KeepCoding.ComponentPool.Count"/> times from this list and instantiate a component of the chosen type.
            </summary>
        </member>
        <member name="T:KeepCoding.ComponentPool.ComponentSource">
            <summary>
            Controls where this pool will draw from (e.g. the base game modules, modules from mods, or both).
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentSource.Base">
            <summary>
            Indicates that the module is from the base game.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentSource.Mods">
            <summary>
            Indicates that the module is from mods.
            </summary>
        </member>
        <member name="T:KeepCoding.ComponentPool.SpecialComponentTypeEnum">
            <summary>
            Controls whether the modules will be chosen dynamically at runtime from whatever modules are loaded (based on the ComponentSource). Set to "None" to select specific module types.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.None">
            <summary>
            Indicates that the mission will choose a set of modules that are self-defined.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.ALL_SOLVABLE">
            <summary>
            Indicates that the mission will randomly pull any of the game's loaded solvable modules.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.ALL_NEEDY">
            <summary>
            Indicates that the mission will randomly pull any of the game's loaded needy modules.
            </summary>
        </member>
        <member name="T:KeepCoding.ComponentPool.ComponentTypeEnum">
            <summary>
            The module types in the base game.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Empty">
            <summary>
            No module. Uses the bomb backing.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Timer">
            <summary>
            The timer component.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Wires">
            <summary>
            On the Subject of Wires.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Wires.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.BigButton">
            <summary>
            On the Subject of The Button.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/The%20Button.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Keypad">
            <summary>
            On the Subject of Keypads.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Keypad.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Simon">
            <summary>
            On the Subject of Simon Says. 
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Simon%20Says.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.WhosOnFirst">
            <summary>
            On the Subject of Who's on First.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Who's%20On%20First.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Memory">
            <summary>
            On the Subject of Memory.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Memory.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Morse">
            <summary>
            On the Subject of Morse Code.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Morse%20Code.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Venn">
            <summary>
            On the Subject of Complicated Wires.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Complicated%20Wires.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.WireSequence">
            <summary>
            On the Subject of Wire Sequences.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Wire%20Sequence.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Maze">
            <summary>
            On the Subject of Mazes.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Maze.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Password">
            <summary>
            On the Subject of Passwords.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Password.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.NeedyVentGas">
            <summary>
            On the Subject of Venting Gas.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Venting%20Gas.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.NeedyCapacitor">
            <summary>
            On the Subject of Capacitor Discharge.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Capacitor%20Discharge.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.NeedyKnob">
            <summary>
            On the Subject of Knobs.
            </summary>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Knob.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Mod">
            <summary>
            Any solvable modded module.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.NeedyMod">
            <summary>
            Any needy modded module.
            </summary>
        </member>
        <member name="M:KeepCoding.ComponentPool.#ctor(System.Int32,KeepCoding.ComponentPool.ComponentSource,KeepCoding.ComponentPool.SpecialComponentTypeEnum,System.Collections.Generic.List{System.String},System.Collections.Generic.List{KeepCoding.ComponentPool.ComponentTypeEnum})">
            <summary>
            Creates a pool of selectable modules.
            </summary>
            <param name="count">The amount of times this pool should be used.</param>
            <param name="allowedSources">Determines the source of the modules.</param>
            <param name="specialComponentType">Determines more random-based module picking.</param>
            <param name="modTypes">The different modded modules to pick from.</param>
            <param name="componentTypes">The different vanilla modules to pick from.</param>
        </member>
        <member name="P:KeepCoding.ComponentPool.Count">
            <summary>
            How many components from this pool should be selected.
            </summary>
        </member>
        <member name="P:KeepCoding.ComponentPool.AllowedSources">
            <summary>
            Controls where components can come from (either the base game, mods, or both).
            </summary>
        </member>
        <member name="P:KeepCoding.ComponentPool.ModTypes">
            <summary>
            A list of mod types to be included in the pool, if they exist.
            </summary>
        </member>
        <member name="P:KeepCoding.ComponentPool.ComponentTypes">
            <summary>
            The list of component types, not including any calculated at runtime special types, like ALL_SOLVABLE. Use GetComponentTypes to get the calculated list.
            </summary>
        </member>
        <member name="P:KeepCoding.ComponentPool.SpecialComponentType">
            <summary>
            Special types which are calculated at runtime, such as <see cref="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.ALL_SOLVABLE"/>.
            </summary>
        </member>
        <member name="M:KeepCoding.ComponentPool.ToString">
            <summary>
            Converts itself to a string.
            </summary>
            <returns>The list of mod types with a count at the end.</returns>
        </member>
        <member name="T:KeepCoding.GeneratorSetting">
            <summary>
            Everything needed to generate a single bomb.
            </summary>
        </member>
        <member name="M:KeepCoding.GeneratorSetting.#ctor">
            <summary>
            Creates a generator setting with the default parameters.
            </summary>
        </member>
        <member name="M:KeepCoding.GeneratorSetting.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Single,System.Collections.Generic.List{KeepCoding.ComponentPool})">
            <summary>
            Creates a generator setting based on the provided parameters.
            </summary>
            <param name="frontFaceOnly">Force modules to be placed only on the front face. By default this will limit the module count to 5 (+1 for the timer). Useful in rare circumstances where you wish to generate a bomb with a few modules and guarantee that they will all be visibile simultaneously.</param>
            <param name="optionalWidgetCount">Set how many optional widgets (widgets other than serial number) that should be placed on the bomb.</param>
            <param name="numStrikes">The number of strikes at which the bomb explodes. Hardcore is 1. More forgiving is 3.</param>
            <param name="timeBeforeNeedyActivation">Time, in seconds, which must elapse before any unactivated Needy modules are automatically activated.</param>
            <param name="timeLimit">Initial value for the timer when the bomb is activated, in seconds.</param>
            <param name="componentPools">The pools of modules that will be used when generating a bomb.</param>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.FrontFaceOnly">
            <summary>
            Force modules to be placed only on the front face. By default this will limit the module count to 5 (+1 for the timer). Useful in rare circumstances where you wish to generate a bomb with a few modules and guarantee that they will all be visibile simultaneously.
            </summary>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.OptionalWidgetCount">
            <summary>
            Set how many optional widgets (widgets other than serial number) that should be placed on the bomb.
            </summary>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.NumStrikes">
            <summary>
            The number of strikes at which the bomb explodes. Hardcore is 1. More forgiving is 3.
            </summary>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.TimeBeforeNeedyActivation">
            <summary>
            Time, in seconds, which must elapse before any unactivated Needy modules are automatically activated.
            </summary>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.TimeLimit">
            <summary>
            Initial value for the timer when the bomb is activated, in seconds.
            </summary>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.ComponentPools">
            <summary>
            The pools of modules that will be used when generating a bomb.
            </summary>
        </member>
        <member name="M:KeepCoding.GeneratorSetting.GetComponentCount">
            <summary>
            The total count of modules that will be added according to the component pools.
            </summary>
            <returns>The amount of components.</returns>
        </member>
        <member name="M:KeepCoding.GeneratorSetting.ToString">
            <summary>
            Converts itself to a string.
            </summary>
            <returns>Time, number of strikes, and the pools converted to a string.</returns>
        </member>
        <member name="T:KeepCoding.Logger">
            <summary>
            A class to allow logging with a specific format.
            </summary>
        </member>
        <member name="M:KeepCoding.Logger.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            The string constructor. The string determines the name.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <param name="name">The name of the value.</param>
            <param name="showId">Determines whether to show the unique identifier when logging.</param>
            <param name="showInLfa">Determines whether to format such that the Logfile Analyzer would use.</param>
        </member>
        <member name="M:KeepCoding.Logger.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            The type constructor. The type's name determines the name.
            </summary>
            <param name="type">The name of the value, using <see cref="P:System.Reflection.MemberInfo.Name"/>.</param>
            <param name="showId">Determines whether to show the unique identifier when logging.</param>
            <param name="showInLfa">Determines whether to format such that the Logfile Analyzer would use.</param>
        </member>
        <member name="P:KeepCoding.Logger.Id">
            <summary>
            The unique identifier of the current name.
            </summary>
        </member>
        <member name="P:KeepCoding.Logger.Name">
            <summary>
            The name of the logger.
            </summary>
        </member>
        <member name="M:KeepCoding.Logger.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCoding.Logger.Log``1(``0,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="M:KeepCoding.Logger.Equals(System.Object)">
            <summary>
            Determines if both objects are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>Whether both objects are equal.</returns>
        </member>
        <member name="M:KeepCoding.Logger.Equals(KeepCoding.Logger)">
            <summary>
            Determines if both <see cref="T:KeepCoding.Logger"/> instances are equal.
            </summary>
            <param name="loggable">The comparison.</param>
            <returns>Whether both <see cref="T:KeepCoding.Logger"/>s are equal.</returns>
        </member>
        <member name="M:KeepCoding.Logger.GetHashCode">
            <summary>
            Gets the hash code of the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCoding.Logger.ToString">
            <summary>
            A string representation of this <see cref="T:KeepCoding.Logger"/> instance.
            </summary>
            <returns>The format of the logging.</returns>
        </member>
        <member name="T:KeepCoding.ModInfo">
            <summary>
            Contains information about the mod's info, this class can be used to deserialize every mod's "modInfo.json".
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.Author">
            <summary>
            Contains the author of the mod.
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.Description">
            <summary>
            Contains the description of the mod.
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.Id">
            <summary>
            Contains the ID of the mod, not to be mistaken with <see cref="P:KeepCoding.ModuleScript.Id"/>.
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.Title">
            <summary>
            Contains the title of the mod.
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.UnityVersion">
            <summary>
            Contains the current unity version of the mod.
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.Version">
            <summary>
            Contains the current version of the mod.
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.Values">
            <summary>
            Returns the current values of this <see cref="T:KeepCoding.ModInfo"/> as a dictionary, where the key is the variable name and the value is the variable value.
            </summary>
        </member>
        <member name="M:KeepCoding.ModInfo.Equals(System.Object)">
            <summary>
            Determines if both objects are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>True if both of them are <see cref="T:KeepCoding.ModInfo"/> and contain the same <see cref="P:KeepCoding.ModInfo.Values"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModInfo.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCoding.ModInfo.ToString">
            <summary>
            Converts the object to a string.
            </summary>
            <returns><see cref="P:KeepCoding.ModInfo.Values"/> unwrapped with <see cref="M:KeepCoding.Helper.Stringify``1(``0,KeepCoding.StringifyFormat)"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModInfo.Deserialize(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes a modInfo.json file. An <see cref="T:System.IO.IOException"/> will make it return a new <see cref="T:KeepCoding.ColorblindInfo"/> instance with no arguments.
            </summary>
            <exception cref="T:Newtonsoft.Json.JsonException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="path">The path of the file to deserialize.</param>
            <param name="settings">The settings for the serialization.</param>
            <returns><paramref name="path"/> deserialized as <see cref="T:KeepCoding.ModInfo"/>.</returns>
        </member>
        <member name="T:KeepCoding.ModuleContainer">
            <summary>
            Contains and encapsulates both solvable and needy modules, in both modded and vanilla forms.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleContainer.#ctor(KeepCoding.CacheableBehaviour)">
            <summary>
            Encapsulates either a modded solvable or modded needy module by using <see cref="M:KeepCoding.CacheableBehaviour.Get``1(System.Boolean)"/>. An exception is thrown if <see cref="T:KMBombModule"/> and <see cref="T:KMNeedyModule"/> are both <see langword="null"/> or both not <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="behaviour">The component to get the module from.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.#ctor(UnityEngine.Component)">
            <summary>
            Encapsulates either a modded solvable or modded needy module by using <see cref="M:UnityEngine.Component.GetComponent``1"/>. An exception is thrown if <see cref="T:KMBombModule"/> and <see cref="T:KMNeedyModule"/> are both <see langword="null"/> or both not <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="component">The component to get the module from.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.#ctor(KMBombModule)">
            <summary>
            Encapsulates a modded solvable module.
            </summary>
            <param name="solvable">The instance of a normal module.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.#ctor(KMNeedyModule)">
            <summary>
            Encapsulates a modded needy module.
            </summary>
            <param name="needy">The instance of a needy module.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.#ctor(KMBombModule,KMNeedyModule)">
            <summary>
            Encapsulates either a modded solvable or modded needy module. An exception is thrown if <see cref="T:KMBombModule"/> and <see cref="T:KMNeedyModule"/> are both <see langword="null"/> or both not <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="solvable">The instance of a normal module.</param>
            <param name="needy">The instance of a needy module.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.#ctor(UnityEngine.MonoBehaviour)">
            <summary>
            Encapsulates either a solvable or needy module. If a BombComponent (or derived) is passed in, the vanilla module component will be stored instead. Uses <see cref="M:UnityEngine.Component.GetComponent``1"/>.
            </summary>
            <param name="monoBehaviour">The <see cref="T:UnityEngine.MonoBehaviour"/> to get the module from.</param>
        </member>
        <member name="P:KeepCoding.ModuleContainer.IsEmptyOrTimer">
            <summary>
            Determines whether this instance is a non-module, which are <see cref="F:KeepCoding.ComponentPool.ComponentTypeEnum.Empty"/> or <see cref="F:KeepCoding.ComponentPool.ComponentTypeEnum.Timer"/>.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleContainer.IsModded">
            <summary>
            Determines whether this instance contains a modded module.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.IsModule">
            <summary>
            Determines whether this instance isn't a non-module, which are <see cref="F:KeepCoding.ComponentPool.ComponentTypeEnum.Empty"/> or <see cref="F:KeepCoding.ComponentPool.ComponentTypeEnum.Timer"/>.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleContainer.IsNeedy">
            <summary>
            Determines whether this instance contains a needy module.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.IsVanilla">
            <summary>
            Determines whether this instance contains a vanilla module.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.IsSolvable">
            <summary>
            Determines whether this instance contains a solvable module.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.RequiresTimerVisibility">
            <summary>
            Set to true to only allow this module to be placed on the same face as the timer. Useful when the rules involve the timer in some way (like the Big Button), but should be used sparingly as it limits generation possibilities.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyWarnAtFiveSeconds">
            <summary>
            Needy Only: Determines whether <see cref="P:KeepCoding.Sound.NeedyWarning"/> plays when 5 seconds or less remain.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyStartingTime">
            <summary>
            Needy Only: The amount of time on the needy timer whenever this module is activated.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyMinResetInterval">
            <summary>
            Needy Only: The minimum delay for the needy to activate.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyMaxResetInterval">
            <summary>
            Needy Only: The maximum delay for the needy to activate.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Id">
            <summary>
            The identifier for the module as referenced in missions. e.g. "BigButton" Also known as a "Module ID". This value is immutable for vanilla modules, and an exception will be thrown when attempted.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
            <exception cref="T:KeepCoding.Internal.ImmutableException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Name">
            <summary>
            The nice display name shown to players. e.g. "The Button". This value is immutable for vanilla modules, and an exception will be thrown when attempted.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
            <exception cref="T:KeepCoding.Internal.ImmutableException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Vanilla">
            <summary>
            Returns BombComponent boxed as <see cref="T:System.Object"/>, or if <see langword="null"/>, throws a <see cref="T:System.NullReferenceException"/>.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Activate">
            <summary>
            Invoked when the lights turn on. This value is immutable for vanilla modules, and an exception will be thrown when attempted.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
            <exception cref="T:KeepCoding.Internal.ImmutableException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyActivate">
            <summary>
            Modded Needy Only: Invoked when the needy activates.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyDeactivate">
            <summary>
            Modded Needy Only: Invoked when the needy deactivates.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyTimerExpired">
            <summary>
            Needy Only: Invoked when the needy timer expires.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Solve">
            <summary>
            Call this when the entire module has been solved.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Strike">
            <summary>
            Call this on any mistake that you want to cause a bomb strike.
            </summary>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyTimerSet">
            <summary>
            Needy Only: An encapsulated <see cref="T:System.Action`1"/> that when called, sets the time remaining to the parameter passed in. This value is immutable for vanilla modules, and an exception will be thrown when attempted.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
            <exception cref="T:KeepCoding.Internal.ImmutableException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.RuleGeneration">
            <summary>
            Modded Only: Returns the random seed used to generate the rules for this game. Not currently used.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.NeedyTimerGet">
            <summary>
            Needy Only: An encapsulated <see cref="T:System.Func`1"/> that when called, gets the time remaining. This value is immutable for vanilla modules, and an exception will be thrown when attempted.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:UnityEngine.MissingReferenceException"></exception>
            <exception cref="T:KeepCoding.Internal.ImmutableException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Solvable">
            <summary>
            Returns <see cref="T:KMBombModule"/>, or if null, throws a <see cref="T:System.NullReferenceException"/>.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Needy">
            <summary>
            Returns <see cref="T:KMNeedyModule"/>, or if null, throws a <see cref="T:System.NullReferenceException"/>.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Module">
            <summary>
            Returns <see cref="T:KMBombModule"/>, or if <see langword="null"/>, <see cref="T:KMNeedyModule"/>, or if <see langword="null"/>, BombComponent, or if <see langword="null"/>, throws.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedTypeException"></exception>
        </member>
        <member name="M:KeepCoding.ModuleContainer.op_Implicit(KMBombModule)~KeepCoding.ModuleContainer">
            <summary>
            Creates a new instance of <see cref="T:KeepCoding.ModuleContainer"/> where <see cref="P:KeepCoding.ModuleContainer.Solvable"/> is defined.
            </summary>
            <param name="solvable">The solvable module to create a new <see cref="T:KeepCoding.ModuleContainer"/> of.</param>
            <returns>A <see cref="T:KeepCoding.ModuleContainer"/> with parameter <paramref name="solvable"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.op_Implicit(KMNeedyModule)~KeepCoding.ModuleContainer">
            <summary>
            Creates a new instance of <see cref="T:KeepCoding.ModuleContainer"/> where <see cref="P:KeepCoding.ModuleContainer.Needy"/> is defined.
            </summary>
            <param name="needy">The needy module to create a new <see cref="T:KeepCoding.ModuleContainer"/> of.</param>
            <returns>A <see cref="T:KeepCoding.ModuleContainer"/> with parameter <paramref name="needy"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.op_Explicit(KeepCoding.ModuleContainer)~KMBombModule">
            <summary>
            Returns the instance of <see cref="T:KMBombModule"/> from <see cref="P:KeepCoding.ModuleContainer.Solvable"/>.
            </summary>
            <param name="container">The <see cref="T:KeepCoding.ModuleContainer"/> to get the <see cref="T:KMBombModule"/> from.</param>
            <returns>A <see cref="T:KMBombModule"/> from <see cref="P:KeepCoding.ModuleContainer.Solvable"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.op_Explicit(KeepCoding.ModuleContainer)~KMNeedyModule">
            <summary>
            Returns the instance of <see cref="T:KMNeedyModule"/> from <see cref="P:KeepCoding.ModuleContainer.Needy"/>.
            </summary>
            <param name="container">The <see cref="T:KeepCoding.ModuleContainer"/> to get the <see cref="T:KMNeedyModule"/> from.</param>
            <returns>A <see cref="T:KMBombModule"/> from <see cref="P:KeepCoding.ModuleContainer.Needy"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.Append(System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action{System.Single},System.Func{System.Int32},System.Func{System.Single})">
            <summary>
            Appends events to this instance, preserving their existing values.
            </summary>
            <param name="activate">Called when the lights turn on.</param>
            <param name="needyActivate">Called when the needy activates.</param>
            <param name="needyDeactivate">Called when the needy deactivates.</param>
            <param name="needyTimerExpired">Called when the timer runs out of time.</param>
            <param name="solve">Called when the needy is solved.</param>
            <param name="strike">Called when the needy strikes.</param>
            <param name="needyTimerSet">Called when <see cref="M:KMNeedyModule.GetNeedyTimeRemaining"/> is called.</param>
            <param name="ruleGeneration">Called when <see cref="M:KMBombModule.GetRuleGenerationSeed"/> or <see cref="M:KMNeedyModule.GetRuleGenerationSeed"/> is called.</param>
            <param name="needyTimerGet">Called when <see cref="M:KMNeedyModule.SetNeedyTimeRemaining(System.Single)"/> is called.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.Assign(System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action{System.Single},System.Func{System.Int32},System.Func{System.Single})">
            <summary>
            Assigns events to this instance, replacing their existing values.
            </summary>
            <param name="activate">Called when the lights turn on.</param>
            <param name="needyActivate">Called when the needy activates.</param>
            <param name="needyDeactivate">Called when the needy deactivates.</param>
            <param name="needyTimerExpired">Called when the timer runs out of time.</param>
            <param name="solve">Called when the needy is solved.</param>
            <param name="strike">Called when the needy strikes.</param>
            <param name="needyTimerSet">Called when <see cref="M:KMNeedyModule.GetNeedyTimeRemaining"/> is called.</param>
            <param name="ruleGeneration">Called when <see cref="M:KMBombModule.GetRuleGenerationSeed"/> or <see cref="M:KMNeedyModule.GetRuleGenerationSeed"/> is called.</param>
            <param name="needyTimerGet">Called when <see cref="M:KMNeedyModule.SetNeedyTimeRemaining(System.Single)"/> is called.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.Equals(System.Object)">
            <summary>
            Determines if both <see cref="T:KeepCoding.ModuleContainer"/> variables are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>True if both contain the same instance of <see cref="T:KMBombModule"/>, <c>null</c>, <see cref="T:KMNeedyModule"/></returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.Equals(KeepCoding.ModuleContainer)">
            <summary>
            Determines if both <see cref="T:KeepCoding.ModuleContainer"/> variables are equal.
            </summary>
            <param name="other">The comparison.</param>
            <returns>True if both contain the same instance of <see cref="T:KMBombModule"/>, <c>null</c>, <see cref="T:KMNeedyModule"/></returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.GetHashCode">
            <summary>
            Gets the current hash code.
            </summary>
            <returns>The <see cref="P:KeepCoding.ModuleContainer.Module"/>'s hash code.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.ToString">
            <summary>
            Gets the <see cref="P:KeepCoding.ModuleContainer.Name"/> and <see cref="P:KeepCoding.ModuleContainer.Id"/> of the module.
            </summary>
            <returns><see cref="P:KeepCoding.ModuleContainer.Name"/> and <see cref="P:KeepCoding.ModuleContainer.Id"/></returns>
        </member>
        <member name="T:KeepCoding.Sound">
            <summary>
            Class meant to encapsulate all types of sound effects <see cref="T:KMAudio"/> uses. Currently used in <see cref="T:KeepCoding.ModuleScript"/>.
            </summary>
        </member>
        <member name="M:KeepCoding.Sound.#ctor(System.String)">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Custom"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
        </member>
        <member name="M:KeepCoding.Sound.#ctor(UnityEngine.AudioClip)">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Custom"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
        </member>
        <member name="M:KeepCoding.Sound.#ctor(KMSoundOverride.SoundEffect)">
            <summary>
            An instance of sound where <see cref="P:KeepCoding.Sound.Game"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
        </member>
        <member name="P:KeepCoding.Sound.Custom">
            <summary>
            The custom sound, written out by name.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.Game">
            <summary>
            The in-game sound.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.Reference">
            <summary>
            The audio reference that is playing the sound.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.AlarmClockBeep">
            <summary>
            Plays when the alarm clock goes off. This sound loops.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.AlarmClockSnooze">
            <summary>
            Plays when you hit snooze button on the alarm clock.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.BigButtonPress">
            <summary>
            Plays when pressing down the button on the Big Button vanilla module.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.BigButtonRelease">
            <summary>
            Plays when releasing the button on the Big Button vanilla module.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.BinderDrop">
            <summary>
            Plays as the mission binder hits the desk.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.BombDefused">
            <summary>
            Plays immediately after a bomb is defused. Plays before <see cref="F:KMSoundOverride.SoundEffect.GameOverFanfare"/>.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.BombDrop">
            <summary>
            Plays when the bomb is set down on the desk.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.BombExplode">
            <summary>
            Plays when the bomb explodes.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.BriefcaseClose">
            <summary>
            Plays when the freeplay briefcase is closed.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.BriefcaseOpen">
            <summary>
            Plays when the freeplay briefcase is opened.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.ButtonPress">
            <summary>
            Plays when pressing down a button.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.ButtonRelease">
            <summary>
            Plays when releasing a button.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.CapacitorPop">
            <summary>
            Plays when Capacitor Discharge fills up completely.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.CorrectChime">
            <summary>
            Plays in the tutorial for completing a step correctly.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.DossierOptionPressed">
            <summary>
            Plays when you change a setting in the menu folder.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.EmergencyAlarm">
            <summary>
            Plays when there is less than a minute left on the bomb, this sound loops.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.FastestTimerBeep">
            <summary>
            Plays when the bomb has at least 2 or more strikes.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.FastTimerBeep">
            <summary>
            Plays when the bomb has 1 strike.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.FreeplayDeviceDrop">
            <summary>
            Plays as the freeplay briefcase hits the desk.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.GameOverFanfare">
            <summary>
            Plays when all bombs are defused. Finishes before the post game screen.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.LightBuzz">
            <summary>
            Plays when the lights go out.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.LightBuzzShort">
            <summary>
            Plays when the lights start to come back on.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.MenuButtonPressed">
            <summary>
            Plays when you start a mission from the mission binder.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.MenuDrop">
            <summary>
            Plays as the mission folder hits the desk.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.NeedyActivated">
            <summary>
            Plays when a needy gets activated.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.NeedyWarning">
            <summary>
            Plays when a needy is running out of time. This sound loops.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.NormalTimerBeep">
            <summary>
            Plays when the bomb has no strikes.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.PageTurn">
            <summary>
            Plays when a page is turned in the Missions binder.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.SelectionTick">
            <summary>
            Plays as you hover over something interactable.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.Stamp">
            <summary>
            Plays during the post game screen, when either the defused or exploded text is stamped onto the binder.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.Strike">
            <summary>
            Plays when you get a strike.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.Switch">
            <summary>
            Plays when a switch is toggled.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.TitleMenuPressed">
            <summary>
            Plays when pressing a button in one of the tutorials.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.TypewriterKey">
            <summary>
            Plays during the post game screen as the mission information gets typed out.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.WireSequenceMechanism">
            <summary>
            Plays when switching between sets of wires in Wire Sequence.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.WireSnip">
            <summary>
            Played when a wire is cut on a module like Complicated Wires.
            </summary>
        </member>
        <member name="M:KeepCoding.Sound.op_Explicit(KeepCoding.Sound)~System.String">
            <summary>
            Returns <see cref="P:KeepCoding.Sound.Custom"/> for the current variable.
            </summary>
            <param name="sound">The variable to grab the property from.</param>
            <returns><paramref name="sound"/>'s <see cref="P:KeepCoding.Sound.Custom"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Explicit(KeepCoding.Sound)~System.Nullable{KMSoundOverride.SoundEffect}">
            <summary>
            Returns <see cref="P:KeepCoding.Sound.Game"/> for the current variable.
            </summary>
            <param name="sound">The variable to grab the property from.</param>
            <returns><paramref name="sound"/>'s <see cref="P:KeepCoding.Sound.Game"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Explicit(KeepCoding.Sound)~KMSoundOverride.SoundEffect">
            <summary>
            Returns <see cref="P:KeepCoding.Sound.Game"/> for the current variable.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="sound">The variable to grab the property from.</param>
            <returns><paramref name="sound"/>'s <see cref="P:KeepCoding.Sound.Game"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Implicit(System.String)~KeepCoding.Sound">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Custom"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
            <returns><see cref="T:KeepCoding.Sound"/> with argument <paramref name="sound"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Implicit(UnityEngine.AudioClip)~KeepCoding.Sound">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Custom"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
            <returns><see cref="T:KeepCoding.Sound"/> with argument <paramref name="sound"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Implicit(KMSoundOverride.SoundEffect)~KeepCoding.Sound">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Game"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
            <returns><see cref="T:KeepCoding.Sound"/> with argument <paramref name="sound"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.StopSound">
            <summary>
            Stops the <see cref="P:KeepCoding.Sound.Reference"/>'s sound.
            </summary>
        </member>
        <member name="M:KeepCoding.Sound.StopSounds``1(``0)">
            <summary>
            Stops all sounds for the entire <see cref="T:KeepCoding.Sound"/> <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The collection of sounds to stop.</typeparam>
            <param name="sounds">The <see cref="T:KeepCoding.Sound"/> <see cref="T:System.Array"/> to mute all sounds from, using <see cref="F:KMAudio.KMAudioRef.StopSound"/>.</param>
        </member>
        <member name="M:KeepCoding.Sound.Equals(System.Object)">
            <summary>
            Determines if both <see cref="T:KeepCoding.Sound"/> variables are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>True if <see cref="P:KeepCoding.Sound.Custom"/>, <see cref="P:KeepCoding.Sound.Reference"/>, and <see cref="P:KeepCoding.Sound.Game"/> are equal.</returns>
        </member>
        <member name="M:KeepCoding.Sound.Equals(KeepCoding.Sound)">
            <summary>
            Determines if both <see cref="T:KeepCoding.Sound"/> variables are equal.
            </summary>
            <param name="other">The comparison.</param>
            <returns>True if <see cref="P:KeepCoding.Sound.Custom"/>, <see cref="P:KeepCoding.Sound.Reference"/>, and <see cref="P:KeepCoding.Sound.Game"/> are equal.</returns>
        </member>
        <member name="M:KeepCoding.Sound.GetHashCode">
            <summary>
            Gets the current hash code.
            </summary>
            <returns>The hash code of <see cref="P:KeepCoding.Sound.Custom"/>, <see cref="P:KeepCoding.Sound.Reference"/>, and <see cref="P:KeepCoding.Sound.Game"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.ToString">
            <summary>
            Converts the current sound to a string, returning the current sound.
            </summary>
            <returns><see cref="P:KeepCoding.Sound.Game"/>, or if null, <see cref="P:KeepCoding.Sound.Custom"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.Method(KMAudio)">
            <summary>
            Gets the corresponding sound method matching the arguments of this instance of <see cref="T:KeepCoding.Sound"/>.
            </summary>
            <param name="audio">The instance of <see cref="T:KMAudio"/> to play from.</param>
            <returns>A method that when called, will play the sound and return the <see cref="T:KMAudio.KMAudioRef"/> instance.</returns>
        </member>
        <member name="T:KeepCoding.StringifyFormat">
            <summary>
            Specfies a format for <see cref="M:KeepCoding.Helper.Stringify``1(``0,KeepCoding.StringifyFormat)"/>.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.ArrayEnd">
            <summary>
            Indicates how <see cref="T:System.Collections.IEnumerator"/>s and <see cref="T:System.Collections.IEnumerable"/>s should end with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.ArraySeparator">
            <summary>
            Indicates how <see cref="T:System.Collections.IEnumerator"/>s and <see cref="T:System.Collections.IEnumerable"/>s should start with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.ArrayStart">
            <summary>
            Indicates how <see cref="T:System.Collections.IEnumerator"/>s and <see cref="T:System.Collections.IEnumerable"/>s should start with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.CharIndicator">
            <summary>
            Indicates how <see cref="T:System.Char"/> should be surrounded with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.DictionaryEnd">
            <summary>
            Indicates how <see cref="T:System.Collections.IDictionary"/>s should end with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.DictionarySeparator">
            <summary>
            Indicates how <see cref="T:System.Collections.IDictionary"/> should start with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.DictionaryStart">
            <summary>
            Indicates how <see cref="T:System.Collections.IDictionary"/>s should start with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.FalseArg">
            <summary>
            Indicates how <see langword="false"/> should be written as.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.KeyValuePairSeparator">
            <summary>
            Indicates how <see cref="T:System.Collections.KeyValuePairs"/> should be surrounded with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.NullArg">
            <summary>
            Indicates how <see langword="null"/> should be written as.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.StringIndicator">
            <summary>
            Indicates how <see cref="T:System.String"/> should be surrounded with.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.TrueArg">
            <summary>
            Indicates how <see langword="true"/> should be written as.
            </summary>
        </member>
        <member name="P:KeepCoding.StringifyFormat.DecimalFormat">
            <summary>
            Indicates how <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, and <see cref="T:System.Decimal"/> should be formatted.
            </summary>
        </member>
        <member name="T:KeepCoding.ILog">
            <summary>
            An interface to implement log methods. Make each method return the same method in your <see cref="T:KeepCoding.Logger"/> instance.  
            </summary>
        </member>
        <member name="M:KeepCoding.ILog.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCoding.ILog.Log``1(``0,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="T:KeepCoding.ITP">
            <summary>
            Interface for Twitch Plays support. 
            </summary>
        </member>
        <member name="P:KeepCoding.ITP.IsCancelCommand">
            <summary>
            Determines if it should cancel command processing. If this returns true, then stop processing the command, clean up, then do a <c>yield return Cancelled;</c> to acknowledge the cancel.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.IsTime">
            <summary>
            Determines if it is in Time Mode, where solves change the timer. This is useful for modules that use the timer's value.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.IsTimeSkippable">
            <summary>
            Determines if it should allow for the timer to be skipped when the module it is in, as well as any other modules that would like to skip time, are the only unsolved modules left on the bomb. 
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.IsTP">
            <summary>
            Determines if Twitch Plays is currently active. This is for modules that need to display different items, or use different rules if Twitch Plays is active.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.IsZen">
            <summary>
            Determines if the timer is counting up instead of down, for special cases, such as controlling how to sort button release times, or whether there is a low timer event or not.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.Help">
            <summary>
            The help message that gets sent when typing <c>!{id} help</c>.
            </summary>
        </member>
        <member name="P:KeepCoding.ITP.Manual">
            <summary>
            Specifies the manual that is looked up on The Manual Repository when <c>!{id} manual</c> is entered into chat.
            </summary>
        </member>
        <member name="P:KeepCoding.ITP.Abandons">
            <summary>
            Declaring this field allows for Twitch Plays to inform the module that the bomb is in Time Mode, where solves change the timer. This is useful for modules that use the timer's value.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="M:KeepCoding.ITP.ForceSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="M:KeepCoding.ITP.Process(System.String)">
            <summary>
            When a command is typed into Twitch Plays with the Id of this module, it calls this method and passes in the exact command typed.
            </summary>
            <remarks>
            Anything that gets yield returned will be processed by Twitch Plays. This includes other <see cref="T:System.Collections.IEnumerable"/> methods, <see cref="T:KMSelectable"/>, an <see cref="T:System.Array"/> of <see cref="T:KMSelectable"/>, <see cref="T:System.String"/>, <c>true</c>, or <c>null</c>.
            </remarks>
            <param name="command">The user's command.</param>
            <returns>A series of instructions for the Twitch Plays mod to handle as requested by the user.</returns>
        </member>
        <member name="T:KeepCoding.IAwake">
            <summary>
            <see cref="M:KeepCoding.IAwake.Awake"/> is called when the script instance is being loaded.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.IAwake.Awake"/> is used to initialize any variables or game state before the game starts. <see cref="M:KeepCoding.IAwake.Awake"/> is called only once during the lifetime of the script instance. <see cref="M:KeepCoding.IAwake.Awake"/> is called after all objects are initialized so you can safely speak to other objects or query them using for example <see cref="M:UnityEngine.GameObject.FindWithTag(System.String)"/>. Each GameObject's <see cref="M:KeepCoding.IAwake.Awake"/> is called in a random order between objects. Because of this, you should use <see cref="M:KeepCoding.IAwake.Awake"/> to set up references between scripts, and use <see cref="M:KeepCoding.IStart.Start"/> to pass any information back and forth. <see cref="M:KeepCoding.IAwake.Awake"/> is always called before any <see cref="M:KeepCoding.IStart.Start"/> functions. This allows you to order initialization of scripts. <see cref="M:KeepCoding.IAwake.Awake"/> can not act as a coroutine. Note: Use <see cref="M:KeepCoding.IAwake.Awake"/> instead of the constructor for initialization, as the serialized state of the <see cref="T:UnityEngine.Component"/> is undefined at construction time. <see cref="M:KeepCoding.IAwake.Awake"/> is called once, just like the constructor.
            </remarks>
            <seealso href="https://docs.unity3d.com/2017.4/Documentation/ScriptReference/MonoBehaviour.Awake.html"/>
        </member>
        <member name="M:KeepCoding.IAwake.Awake">
            <summary>
            <see cref="M:KeepCoding.IAwake.Awake"/> is called when the script instance is being loaded.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.IAwake.Awake"/> is used to initialize any variables or game state before the game starts. <see cref="M:KeepCoding.IAwake.Awake"/> is called only once during the lifetime of the script instance. <see cref="M:KeepCoding.IAwake.Awake"/> is called after all objects are initialized so you can safely speak to other objects or query them using for example <see cref="M:UnityEngine.GameObject.FindWithTag(System.String)"/>. Each GameObject's <see cref="M:KeepCoding.IAwake.Awake"/> is called in a random order between objects. Because of this, you should use <see cref="M:KeepCoding.IAwake.Awake"/> to set up references between scripts, and use <see cref="M:KeepCoding.IStart.Start"/> to pass any information back and forth. <see cref="M:KeepCoding.IAwake.Awake"/> is always called before any <see cref="M:KeepCoding.IStart.Start"/> functions. This allows you to order initialization of scripts. <see cref="M:KeepCoding.IAwake.Awake"/> can not act as a coroutine. Note: Use <see cref="M:KeepCoding.IAwake.Awake"/> instead of the constructor for initialization, as the serialized state of the <see cref="T:UnityEngine.Component"/> is undefined at construction time. <see cref="M:KeepCoding.IAwake.Awake"/> is called once, just like the constructor.
            </remarks>
            <seealso href="https://docs.unity3d.com/2017.4/Documentation/ScriptReference/MonoBehaviour.Awake.html"/>
        </member>
        <member name="T:KeepCoding.IFixedUpdate">
            <summary>
            Frame-rate independent <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> message for physics calculations.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> has the frequency of the physics system; it is called every fixed frame-rate frame. Compute <see cref="T:UnityEngine.Physics"/> system calculations after <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/>. 0.02 seconds (50 calls per second) is the default time between calls. Use <see cref="P:UnityEngine.Time.fixedDeltaTime"/> to access this value. Alter it by setting it to your preferred value within a script, or, navigate to <c>Edit > Settings > Time > Fixed Timestep</c> and set it there. The <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> frequency is more or less than <see cref="M:KeepCoding.IUpdate.Update"/>. If the application runs at 25 frames per second (fps), Unity calls it approximately twice per frame, Alternatively, 100 fps causes approximately two rendering frames with one <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/>. Control the required frame rate and <c>Fixed Timestep</c> rate from <c>Time</c> settings. Use <see cref="P:UnityEngine.Application.targetFrameRate"/> to set the frame rate. Use <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> when using <see cref="T:UnityEngine.Rigidbody"/>. Set a force to a <see cref="T:UnityEngine.Rigidbody"/> and it applies each fixed frame. <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> occurs at a measured time step that typically does not coincide with <see cref="M:KeepCoding.IUpdate.Update"/>. In order to get the elapsed time since last call to <see cref="M:KeepCoding.IUpdate.Update"/>, use <see cref="P:UnityEngine.Time.deltaTime"/>. This function is only called if the <see cref="T:UnityEngine.Behaviour"/> is enabled. Override this function in order to provide your <see cref="T:UnityEngine.Component"/>'s functionality.
            </remarks>
            <seealso href="https://docs.unity3d.com/2017.4/Documentation/ScriptReference/MonoBehaviour.FixedUpdate.html"/>
        </member>
        <member name="M:KeepCoding.IFixedUpdate.FixedUpdate">
            <summary>
            Frame-rate independent <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> message for physics calculations.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> has the frequency of the physics system; it is called every fixed frame-rate frame. Compute <see cref="T:UnityEngine.Physics"/> system calculations after <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/>. 0.02 seconds (50 calls per second) is the default time between calls. Use <see cref="P:UnityEngine.Time.fixedDeltaTime"/> to access this value. Alter it by setting it to your preferred value within a script, or, navigate to <c>Edit > Settings > Time > Fixed Timestep</c> and set it there. The <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> frequency is more or less than <see cref="M:KeepCoding.IUpdate.Update"/>. If the application runs at 25 frames per second (fps), Unity calls it approximately twice per frame, Alternatively, 100 fps causes approximately two rendering frames with one <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/>. Control the required frame rate and <c>Fixed Timestep</c> rate from <c>Time</c> settings. Use <see cref="P:UnityEngine.Application.targetFrameRate"/> to set the frame rate. Use <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> when using <see cref="T:UnityEngine.Rigidbody"/>. Set a force to a <see cref="T:UnityEngine.Rigidbody"/> and it applies each fixed frame. <see cref="M:KeepCoding.IFixedUpdate.FixedUpdate"/> occurs at a measured time step that typically does not coincide with <see cref="M:KeepCoding.IUpdate.Update"/>. In order to get the elapsed time since last call to <see cref="M:KeepCoding.IUpdate.Update"/>, use <see cref="P:UnityEngine.Time.deltaTime"/>. This function is only called if the <see cref="T:UnityEngine.Behaviour"/> is enabled. Override this function in order to provide your <see cref="T:UnityEngine.Component"/>'s functionality.
            </remarks>
            <seealso href="https://docs.unity3d.com/2017.4/Documentation/ScriptReference/MonoBehaviour.FixedUpdate.html"/>
        </member>
        <member name="T:KeepCoding.ILateUpdate">
            <summary>
            <see cref="M:KeepCoding.ILateUpdate.LateUpdate"/> is called every frame, if the <see cref="T:UnityEngine.Behaviour"/> is enabled.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.ILateUpdate.LateUpdate"/> is called after all <see cref="M:KeepCoding.IUpdate.Update"/> functions have been called. This is useful to order script execution. For example a follow <see cref="T:UnityEngine.Camera"/> should always be implemented in <see cref="M:KeepCoding.ILateUpdate.LateUpdate"/> because it tracks objects that might have moved inside <see cref="M:KeepCoding.IUpdate.Update"/>. In order to get the elapsed time since last call to <see cref="M:KeepCoding.ILateUpdate.LateUpdate"/>, use <see cref="P:UnityEngine.Time.deltaTime"/>. This function is only called if the <see cref="T:UnityEngine.Behaviour"/> is enabled. Override this function in order to provide your <see cref="T:UnityEngine.Component"/>'s functionality.
            </remarks>
            <seealso href="https://docs.unity3d.com/2017.4/Documentation/ScriptReference/MonoBehaviour.LateUpdate.html"/>
        </member>
        <member name="M:KeepCoding.ILateUpdate.LateUpdate">
            <summary>
            <see cref="M:KeepCoding.ILateUpdate.LateUpdate"/> is called every frame, if the <see cref="T:UnityEngine.Behaviour"/> is enabled.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.ILateUpdate.LateUpdate"/> is called after all <see cref="M:KeepCoding.IUpdate.Update"/> functions have been called. This is useful to order script execution. For example a follow <see cref="T:UnityEngine.Camera"/> should always be implemented in <see cref="M:KeepCoding.ILateUpdate.LateUpdate"/> because it tracks objects that might have moved inside <see cref="M:KeepCoding.IUpdate.Update"/>. In order to get the elapsed time since last call to <see cref="M:KeepCoding.ILateUpdate.LateUpdate"/>, use <see cref="P:UnityEngine.Time.deltaTime"/>. This function is only called if the <see cref="T:UnityEngine.Behaviour"/> is enabled. Override this function in order to provide your <see cref="T:UnityEngine.Component"/>'s functionality.
            </remarks>
            <seealso href="https://docs.unity3d.com/2017.4/Documentation/ScriptReference/MonoBehaviour.LateUpdate.html"/>
        </member>
        <member name="T:KeepCoding.IReset">
            <summary>
            Reset to default values.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.IReset.Reset"/> is called when the user hits the Reset button in the Inspector's context menu or when adding the <see cref="T:UnityEngine.Component"/> the first time. This function is only called in editor mode. <see cref="M:KeepCoding.IReset.Reset"/> is most commonly used to give good default values in the inspector.
            </remarks>
            <seealso href="https://docs.unity3d.com/2017.4/Documentation/ScriptReference/MonoBehaviour.Reset.html"/>
        </member>
        <member name="M:KeepCoding.IReset.Reset">
            <summary>
            Reset to default values.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.IReset.Reset"/> is called when the user hits the Reset button in the Inspector's context menu or when adding the <see cref="T:UnityEngine.Component"/> the first time. This function is only called in editor mode. <see cref="M:KeepCoding.IReset.Reset"/> is most commonly used to give good default values in the inspector.
            </remarks>
            <seealso href="https://docs.unity3d.com/2017.4/Documentation/ScriptReference/MonoBehaviour.Reset.html"/>
        </member>
        <member name="T:KeepCoding.IStart">
            <summary>
            <see cref="M:KeepCoding.IStart.Start"/> is called on the frame when a script is enabled just before any of the <see cref="M:KeepCoding.IUpdate.Update"/> methods is called the first time.
            </summary>
            <remarks>
            Like the <see cref="M:KeepCoding.IAwake.Awake"/> function, <see cref="M:KeepCoding.IStart.Start"/> is called exactly once in the lifetime of the script. However, <see cref="M:KeepCoding.IAwake.Awake"/> is called when the script object is initialised, regardless of whether or not the script is enabled. <see cref="M:KeepCoding.IStart.Start"/> may not be called on the same frame as <see cref="M:KeepCoding.IAwake.Awake"/> if the script is not enabled at initialisation time. The <see cref="M:KeepCoding.IAwake.Awake"/> function is called on all objects in the scene before any object's <see cref="M:KeepCoding.IStart.Start"/> function is called. This fact is useful in cases where object A's initialisation code needs to rely on object B's already being initialised; B's initialisation should be done in <see cref="M:KeepCoding.IAwake.Awake"/> while A's should be done in <see cref="M:KeepCoding.IStart.Start"/>. Where objects are instantiated during gameplay, their <see cref="M:KeepCoding.IAwake.Awake"/> function will naturally be called after the <see cref="M:KeepCoding.IStart.Start"/> functions of scene objects have already completed.
            </remarks>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html"/>
        </member>
        <member name="M:KeepCoding.IStart.Start">
            <summary>
            <see cref="M:KeepCoding.IStart.Start"/> is called on the frame when a script is enabled just before any of the <see cref="M:KeepCoding.IUpdate.Update"/> methods is called the first time.
            </summary>
            <remarks>
            Like the <see cref="M:KeepCoding.IAwake.Awake"/> function, <see cref="M:KeepCoding.IStart.Start"/> is called exactly once in the lifetime of the script. However, <see cref="M:KeepCoding.IAwake.Awake"/> is called when the script object is initialised, regardless of whether or not the script is enabled. <see cref="M:KeepCoding.IStart.Start"/> may not be called on the same frame as <see cref="M:KeepCoding.IAwake.Awake"/> if the script is not enabled at initialisation time. The <see cref="M:KeepCoding.IAwake.Awake"/> function is called on all objects in the scene before any object's <see cref="M:KeepCoding.IStart.Start"/> function is called. This fact is useful in cases where object A's initialisation code needs to rely on object B's already being initialised; B's initialisation should be done in <see cref="M:KeepCoding.IAwake.Awake"/> while A's should be done in <see cref="M:KeepCoding.IStart.Start"/>. Where objects are instantiated during gameplay, their <see cref="M:KeepCoding.IAwake.Awake"/> function will naturally be called after the <see cref="M:KeepCoding.IStart.Start"/> functions of scene objects have already completed.
            </remarks>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html"/>
        </member>
        <member name="T:KeepCoding.IStartCoroutine">
            <summary>
            <see cref="M:KeepCoding.IStartCoroutine.Start"/> is called on the frame when a script is enabled just before any of the <see cref="M:KeepCoding.IUpdate.Update"/> methods is called the first time.
            </summary>
            <remarks>
            Like the <see cref="M:KeepCoding.IAwake.Awake"/> function, <see cref="M:KeepCoding.IStartCoroutine.Start"/> is called exactly once in the lifetime of the script. However, <see cref="M:KeepCoding.IAwake.Awake"/> is called when the script object is initialised, regardless of whether or not the script is enabled. <see cref="M:KeepCoding.IStartCoroutine.Start"/> may not be called on the same frame as <see cref="M:KeepCoding.IAwake.Awake"/> if the script is not enabled at initialisation time. The <see cref="M:KeepCoding.IAwake.Awake"/> function is called on all objects in the scene before any object's <see cref="M:KeepCoding.IStartCoroutine.Start"/> function is called. This fact is useful in cases where object A's initialisation code needs to rely on object B's already being initialised; B's initialisation should be done in <see cref="M:KeepCoding.IAwake.Awake"/> while A's should be done in <see cref="M:KeepCoding.IStartCoroutine.Start"/>. Where objects are instantiated during gameplay, their <see cref="M:KeepCoding.IAwake.Awake"/> function will naturally be called after the <see cref="M:KeepCoding.IStartCoroutine.Start"/> functions of scene objects have already completed.
            </remarks>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html"/>
        </member>
        <member name="M:KeepCoding.IStartCoroutine.Start">
            <summary>
            <see cref="M:KeepCoding.IStartCoroutine.Start"/> is called on the frame when a script is enabled just before any of the <see cref="M:KeepCoding.IUpdate.Update"/> methods is called the first time.
            </summary>
            <remarks>
            Like the <see cref="M:KeepCoding.IAwake.Awake"/> function, <see cref="M:KeepCoding.IStartCoroutine.Start"/> is called exactly once in the lifetime of the script. However, <see cref="M:KeepCoding.IAwake.Awake"/> is called when the script object is initialised, regardless of whether or not the script is enabled. <see cref="M:KeepCoding.IStartCoroutine.Start"/> may not be called on the same frame as <see cref="M:KeepCoding.IAwake.Awake"/> if the script is not enabled at initialisation time. The <see cref="M:KeepCoding.IAwake.Awake"/> function is called on all objects in the scene before any object's <see cref="M:KeepCoding.IStartCoroutine.Start"/> function is called. This fact is useful in cases where object A's initialisation code needs to rely on object B's already being initialised; B's initialisation should be done in <see cref="M:KeepCoding.IAwake.Awake"/> while A's should be done in <see cref="M:KeepCoding.IStartCoroutine.Start"/>. Where objects are instantiated during gameplay, their <see cref="M:KeepCoding.IAwake.Awake"/> function will naturally be called after the <see cref="M:KeepCoding.IStartCoroutine.Start"/> functions of scene objects have already completed.
            </remarks>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html"/>
        </member>
        <member name="T:KeepCoding.IUpdate">
            <summary>
            <see cref="M:KeepCoding.IUpdate.Update"/> is called every frame, if the <see cref="T:UnityEngine.MonoBehaviour"/> is enabled.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.IUpdate.Update"/> is the most commonly used function to implement any kind of game script. Not every <see cref="T:UnityEngine.MonoBehaviour"/> script needs <see cref="M:KeepCoding.IUpdate.Update"/>. In order to get the elapsed time since last call to <see cref="M:KeepCoding.IUpdate.Update"/>, use <see cref="P:UnityEngine.Time.deltaTime"/>. This function is only called if the <see cref="T:UnityEngine.Behaviour"/> is enabled. Override this function in order to provide your <see cref="T:UnityEngine.Component"/>'s functionality.
            </remarks>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html"/>
        </member>
        <member name="M:KeepCoding.IUpdate.Update">
            <summary>
            <see cref="M:KeepCoding.IUpdate.Update"/> is called every frame, if the <see cref="T:UnityEngine.MonoBehaviour"/> is enabled.
            </summary>
            <remarks>
            <see cref="M:KeepCoding.IUpdate.Update"/> is the most commonly used function to implement any kind of game script. Not every <see cref="T:UnityEngine.MonoBehaviour"/> script needs <see cref="M:KeepCoding.IUpdate.Update"/>. In order to get the elapsed time since last call to <see cref="M:KeepCoding.IUpdate.Update"/>, use <see cref="P:UnityEngine.Time.deltaTime"/>. This function is only called if the <see cref="T:UnityEngine.Behaviour"/> is enabled. Override this function in order to provide your <see cref="T:UnityEngine.Component"/>'s functionality.
            </remarks>
            <seealso href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html"/>
        </member>
        <member name="T:KeepCoding.AudioScript">
            <summary>
            Encapsulates an <see cref="P:KeepCoding.AudioScript.AudioSource"/> and scales it with the game's volume using <see cref="P:KeepCoding.Game.PlayerSettings.SFXVolume"/> and <see cref="P:KeepCoding.Game.PlayerSettings.MusicVolume"/>.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.IsMuted">
            <summary>
            Determines if the <see cref="P:KeepCoding.AudioScript.AudioSource"/> is muted.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.IsPlaying">
            <summary>
            Determines if the audio source is currently playing.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.IsSFX">
            <summary>
            Determines if <see cref="P:UnityEngine.AudioSource.volume"/> in <see cref="P:KeepCoding.AudioScript.AudioSource"/> is scaled using <see cref="P:KeepCoding.Game.PlayerSettings.SFXVolume"/> when <see langword="true"/> and <see cref="P:KeepCoding.Game.PlayerSettings.MusicVolume"/> when <see langword="false"/>.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.Game">
            <summary>
            The current volume of the game. Ranges 0 to 100. In the Editor this value will always return 100.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.Relative">
            <summary>
            The volume the <see cref="P:KeepCoding.AudioScript.AudioSource"/> is playing at, determined by <see cref="P:KeepCoding.AudioScript.Volume"/> and <see cref="P:KeepCoding.AudioScript.Game"/>.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.Volume">
            <summary>
            The volume of the sound relative to the game.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.AudioClips">
            <summary>
            The audio clips used by the <see cref="T:UnityEngine.AudioSource"/>s.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.AudioSource">
            <summary>
            The main <see cref="T:UnityEngine.AudioSource"/> property. If the field it is referencing is <see langword="null"/> then it adds a component.
            </summary>
        </member>
        <member name="M:KeepCoding.AudioScript.op_Explicit(KeepCoding.AudioScript)~UnityEngine.AudioSource">
            <summary>
            Returns the <see cref="P:KeepCoding.AudioScript.AudioSource"/>.
            </summary>
            <param name="dynamicAudio">The instance of <see cref="T:KeepCoding.AudioScript"/> to retrieve <see cref="P:KeepCoding.AudioScript.AudioSource"/> from.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.Awake">
            <summary>
            Sets up base functionality for the audio. If you declare this method yourself, make sure to call <c>base.Awake()</c> to ensure that this component initializes correctly
            </summary>
        </member>
        <member name="M:KeepCoding.AudioScript.Fade(System.Single,System.Single)">
            <summary>
            Fades the audio source to a specific volume from a specified duration of time linearly.
            </summary>
            <param name="volume">The volume to get to.</param>
            <param name="time">The amount of time it takes to get to <paramref name="volume"/>.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.Update">
            <summary>
            Updates the volume of <see cref="P:KeepCoding.AudioScript.AudioSource"/>. If you declare this method yourself, make sure to call <c>base.Update()</c> to ensure that this component retains functionality.
            </summary>
        </member>
        <member name="M:KeepCoding.AudioScript.Pause">
            <summary>
            Pauses playing the clip.
            </summary>
        </member>
        <member name="M:KeepCoding.AudioScript.Play(UnityEngine.AudioClip,System.Boolean,System.Byte,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound, with optional parameters.
            </summary>
            <remarks>
            The sound can be cancelled with this method, but multiple sounds cannot play simultaneously.
            </remarks>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="clip">The sound clip to play.</param>
            <param name="volume">The volume of the sound clip relative to the game sound.</param>
            <param name="loop">If the sound should be looped.</param>
            <param name="priority">The priority of the sound.</param>
            <param name="delay">The amount of delay before the sound starts.</param>
            <param name="time">The time in the audio it should start playing at.</param>
            <param name="pitch">The pitch of the sound.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.Play(System.String,System.Boolean,System.Byte,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound, with optional parameters.
            </summary>
            <remarks>
            The sound can be cancelled with this method, but multiple sounds cannot play simultaneously.
            </remarks>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="name">The name of the sound clip to play.</param>
            <param name="volume">The volume of the sound clip relative to the game sound.</param>
            <param name="loop">If the sound should be looped.</param>
            <param name="priority">The priority of the sound.</param>
            <param name="delay">The amount of delay before the sound starts.</param>
            <param name="time">The time in the audio it should start playing at.</param>
            <param name="pitch">The pitch of the sound.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.PlayStackable(UnityEngine.AudioClip,System.Boolean,System.Byte,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound, with optional parameters.
            </summary>
            <remarks>
            Multiple sounds can be played simultaneously with this method, however they cannot be cancelled.
            </remarks>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="clip">The sound clip to play.</param>
            <param name="volume">The volume of the sound clip relative to the game sound.</param>
            <param name="loop">If the sound should be looped.</param>
            <param name="priority">The priority of the sound.</param>
            <param name="time">The time in the audio it should start playing at.</param>
            <param name="pitch">The pitch of the sound.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.PlayStackable(System.String,System.Boolean,System.Byte,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound, with optional parameters.
            </summary>
            <remarks>
            Multiple sounds can be played simultaneously with this method, however they cannot be cancelled.
            </remarks>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="name">The name of the sound clip to play.</param>
            <param name="volume">The volume of the sound clip relative to the game sound.</param>
            <param name="loop">If the sound should be looped.</param>
            <param name="priority">The priority of the sound.</param>
            <param name="time">The time in the audio it should start playing at.</param>
            <param name="pitch">The pitch of the sound.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.Stop">
            <summary>
            Stops playing the clip.
            </summary>
        </member>
        <member name="M:KeepCoding.AudioScript.Unpause">
            <summary>
            Unpauses the paused playback of this <see cref="P:KeepCoding.AudioScript.AudioSource"/>.
            </summary>
        </member>
        <member name="T:KeepCoding.CacheableBehaviour">
            <summary>
            A <see cref="T:UnityEngine.MonoBehaviour"/> with additional caching capabilities. 
            </summary>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Clear">
            <summary>
            Clears the <see cref="T:UnityEngine.Component"/> and <see cref="T:UnityEngine.Object"/> caches.
            </summary>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Cache(System.Type,System.Func{System.Type,UnityEngine.Component},System.Boolean)">
            <summary>
            Caches the result of a function call that returns a component array in a dictionary, and will return the cached result if called again. Use this to alleviate expensive function calls.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="func">The expensive function to call, only if it hasn't ever been called by this method on the current instance before.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The components specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Cache(System.Type,System.Func{System.Type,UnityEngine.Component[]},System.Boolean)">
            <summary>
            Caches the result of a function call that returns a component array in a dictionary, and will return the cached result if called again. Use this to alleviate expensive function calls.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="func">The expensive function to call, only if it hasn't ever been called by this method on the current instance before.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The components specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Find(System.Type,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Object.FindObjectsOfType(System.Type)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Get(System.Type,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponent(System.Type)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.GetChild(System.Type,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponentInChildren(System.Type)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.GetParent(System.Type,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponentInParent(System.Type)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Finds(System.Type,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Object.FindObjectsOfType(System.Type)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Gets(System.Type,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.GameObject.GetComponents(System.Type)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.GetChildren(System.Type,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.GameObject.GetComponentsInChildren(System.Type)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.GetParents(System.Type,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.GameObject.GetComponentsInParent(System.Type)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="type">The type of component to search for.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <paramref name="type"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Cache``1(System.Func{``0},System.Boolean)">
            <summary>
            Caches the result of a function call that returns a component array in a dictionary, and will return the cached result if called again. Use this to alleviate expensive function calls.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="func">The expensive function to call, only if it hasn't ever been called by this method on the current instance before.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The components specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Find``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Object.FindObjectsOfType``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Get``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponent``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.GetChild``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponentInChildren``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.GetParent``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponentInParent``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Cache``1(System.Func{``0[]},System.Boolean)">
            <summary>
            Caches the result of a function call that returns a component array in a dictionary, and will return the cached result if called again. Use this to alleviate expensive function calls.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="func">The expensive function to call, only if it hasn't ever been called by this method on the current instance before.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The components specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Cache``1(System.Func{System.Boolean,``0[]},System.Boolean,System.Boolean)">
            <summary>
            Caches the result of a function call that returns a component array in a dictionary, and will return the cached result if called again. Use this to alleviate expensive function calls.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="func">The expensive function to call, only if it hasn't ever been called by this method on the current instance before.</param>
            <param name="parameter">The argument to put in the expensive method call.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The components specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Finds``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Object.FindObjectsOfType``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.Gets``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.GameObject.GetComponents``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.GetChildren``1(System.Boolean,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.GameObject.GetComponentsInChildren``1(System.Boolean)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="includeInactive">Whether it should include inactive components.</param>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.CacheableBehaviour.GetParents``1(System.Boolean,System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.GameObject.GetComponentsInParent``1(System.Boolean)"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="includeInactive">Whether it should include inactive components.</param>
            <param name="allowNull">Whether it should throw an exception if it sees <see langword="null"/>, if not it will return the default value. (Likely <see langword="null"/>)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:KeepCoding.ModuleScript">
            <summary>
            Base class for solvable and needy modded modules in Keep Talking and Nobody Explodes.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.HasStruck">
            <summary>
            Determines whether the module has been struck. <see cref="M:KeepCoding.TPScript`1.OnInteractSequence(KMSelectable[],System.Single,System.Int32[])"/> will set this to <see langword="false"/> when a command is interrupted.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsActive">
            <summary>
            Determines whether the bomb is currently active, and the timer is ticking.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsColorblind">
            <summary>
            Determines whether the module's colorblind mode is enabled.
            </summary>
            <exception cref="T:System.MissingMethodException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsNeedyActive">
            <summary>
            Determines whether the needy is active.
            </summary>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsSolved">
            <summary>
            Determines whether the module has been solved.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsVR">
            <summary>
            Determines whether the game is being played with motion virtual reality. In the Editor, it always returns false.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.Id">
            <summary>
            The Unique Id for the module of this type.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.LastId">
            <summary>
            The last Id instantiation for the module of this type.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.TimeLeft">
            <summary>
            The amount of time left on the bomb, in seconds, rounded down.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.RuleSeedId">
            <summary>
            Gets the rule seed number.
            </summary>
            <returns>The rule seed number, by default 1.</returns>
        </member>
        <member name="P:KeepCoding.ModuleScript.Version">
            <summary>
            The version number of the entire mod.
            </summary>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:Newtonsoft.Json.JsonException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleScript.IgnoredModules">
            <summary>
            The ignored modules of this module from the Boss Module Manager.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.Colorblind">
            <summary>
            Contains colorblind information. This property will return <see langword="null"/> in the event that <see cref="M:KeepCoding.ModuleScript.OnColorblindChanged(System.Boolean)"/> isn't implemented.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.TP">
            <summary>
            Gets the Twitch Plays <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <remarks>
            Due to type ambiguity, a non-generic interface is returned.
            </remarks>
        </member>
        <member name="P:KeepCoding.ModuleScript.Bomb">
            <summary>
            The bomb that this module is in.
            </summary>
            <remarks>
            Note that this variable is not available instantly. <see cref="M:KeepCoding.ModuleScript.OnActivate"/> is recommended, or a <see cref="T:UnityEngine.Coroutine"/> that waits for this value to be set.
            </remarks>
        </member>
        <member name="P:KeepCoding.ModuleScript.Sounds">
            <summary>
            Contains an instance for every <see cref="T:KeepCoding.Sound"/> played by this module using <see cref="M:KeepCoding.ModuleScript.PlaySound(UnityEngine.Transform,System.Boolean,KeepCoding.Sound[])"/> or any of its overloads.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.Module">
            <summary>
            Contains either <see cref="T:KMBombModule"/> or <see cref="T:KMNeedyModule"/>, and allows for running commands through context.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.RuleSeed">
            <summary>
            The pseudo-random number generator whose number generations are based on the current Rule Seed.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.Modules">
            <summary>
            Contains every module in the <see cref="T:KMBomb"/> that this module is in.
            </summary>
            <remarks>
            Note that this variable is not available instantly. <see cref="M:KeepCoding.ModuleScript.OnActivate"/> is recommended, or a <see cref="T:UnityEngine.Coroutine"/> that waits for this value to be set. A small amount of time is needed for this property to be set. This collection also includes vanilla modules, including <see cref="F:KeepCoding.ComponentPool.ComponentTypeEnum.Empty"/> components and <see cref="F:KeepCoding.ComponentPool.ComponentTypeEnum.Timer"/>. You can filter the collection with <see cref="P:KeepCoding.ModuleContainer.IsVanilla"/>, <see cref="P:KeepCoding.ModuleContainer.IsModded"/>, <see cref="P:KeepCoding.ModuleContainer.IsSolvable"/>, or <see cref="P:KeepCoding.ModuleContainer.IsNeedy"/>, <see cref="P:KeepCoding.ModuleContainer.IsEmptyOrTimer"/>, or <see cref="P:KeepCoding.ModuleContainer.IsModule"/>.
            </remarks>
        </member>
        <member name="M:KeepCoding.ModuleScript.Append(System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action{System.Single},System.Func{System.Int32},System.Func{System.Single})">
            <summary>
            Appends events to this instance's <see cref="P:KeepCoding.ModuleScript.Module"/>, preserving their existing values.
            </summary>
            <param name="activate">Called when the lights turn on.</param>
            <param name="needyActivate">Called when the needy activates.</param>
            <param name="needyDeactivate">Called when the needy deactivates.</param>
            <param name="needyTimerExpired">Called when the timer runs out of time.</param>
            <param name="solve">Called when the needy is solved.</param>
            <param name="strike">Called when the needy strikes.</param>
            <param name="needyTimerSet">Called when <see cref="M:KMNeedyModule.GetNeedyTimeRemaining"/> is called.</param>
            <param name="ruleGeneration">Called when <see cref="M:KMBombModule.GetRuleGenerationSeed"/> or <see cref="M:KMNeedyModule.GetRuleGenerationSeed"/> is called.</param>
            <param name="needyTimerGet">Called when <see cref="M:KMNeedyModule.SetNeedyTimeRemaining(System.Single)"/> is called.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Assign(System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action{System.Single},System.Func{System.Int32},System.Func{System.Single})">
            <summary>
            Assigns events to this instance's <see cref="P:KeepCoding.ModuleScript.Module"/>, replacing their existing values.
            </summary>
            <param name="activate">Called when the lights turn on.</param>
            <param name="needyActivate">Called when the needy activates.</param>
            <param name="needyDeactivate">Called when the needy deactivates.</param>
            <param name="needyTimerExpired">Called when the timer runs out of time.</param>
            <param name="solve">Called when the needy is solved.</param>
            <param name="strike">Called when the needy strikes.</param>
            <param name="needyTimerSet">Called when <see cref="M:KMNeedyModule.GetNeedyTimeRemaining"/> is called.</param>
            <param name="ruleGeneration">Called when <see cref="M:KMBombModule.GetRuleGenerationSeed"/> or <see cref="M:KMNeedyModule.GetRuleGenerationSeed"/> is called.</param>
            <param name="needyTimerGet">Called when <see cref="M:KMNeedyModule.SetNeedyTimeRemaining(System.Single)"/> is called.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Awake">
            <summary>
            Sets up base functionality for the module. If you declare this method yourself, make sure to call <c>base.Awake()</c> to ensure that the module initializes correctly.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.ButtonEffect(KMSelectable,System.Single,KeepCoding.Sound[])">
            <summary>
            Handles typical button <see cref="F:KMSelectable.OnInteract"/> behaviour.
            </summary>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="selectable">The selectable, which is used as a source for sound and bomb shake.</param>
            <param name="intensityModifier">The intensity of the bomb shaking.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Log``1(``0,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnActivate">
            <summary>
            Called when the lights turn on.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnColorblindChanged(System.Boolean)">
            <summary>
            Called when colorblind support needs to be updated for the module.
            </summary>
            <param name="isEnabled">Whether colorblind support should be enabled.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnDestruct">
            <summary>
            Called when the module destroys itself, after the bomb unloads.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnModuleStrike(KeepCoding.ModuleContainer)">
            <summary>
            Called when any module on the current bomb has issued a strike.
            </summary>
            <param name="module">The sender encapsulated as <see cref="T:KeepCoding.ModuleContainer"/>, which caused a strike.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnNeedyActivate">
            <summary>
            Called when the needy activates.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnNeedyDeactivate">
            <summary>
            Called when the needy deactivates or runs out of time.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnModuleSolved(KeepCoding.ModuleContainer)">
            <summary>
            Called when any <see cref="T:KMBombModule"/> or BombComponent on the current bomb has been solved.
            </summary>
            <param name="module">The sender encapsulated as <see cref="T:KeepCoding.ModuleContainer"/>, which was solved.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnTimerTick">
            <summary>
            Called when the timer's seconds-digit changes.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.Solve(System.String[])">
            <summary>
            Solves the module, and logs all of the parameters.
            </summary>
            <param name="logs">All of the entries to log.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Strike(System.String[])">
            <summary>
            Strikes the module, and logs all of the parameters.
            </summary>
            <param name="logs">All of the entries to log.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.PlaySound(UnityEngine.Transform,System.Boolean,KeepCoding.Sound[])">
            <summary>
            Plays a sound. Requires <see cref="T:KMAudio"/> to be assigned.
            </summary>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="transform">The location or sound source of the sound.</param>
            <param name="loop">Whether all sounds listed should loop or not.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
            <returns>A <see cref="T:KMAudio.KMAudioRef"/> for each argument you provide.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.PlaySound(UnityEngine.Transform,KeepCoding.Sound[])">
            <summary>
            Plays a sound. Requires <see cref="T:KMAudio"/> to be assigned.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="transform">The location or sound source of the sound.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
            <returns>A <see cref="T:KMAudio.KMAudioRef"/> for each argument you provide.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.PlaySound(System.Boolean,KeepCoding.Sound[])">
            <summary>
            Plays a sound, the sound source is the game object it is attached to. Requires <see cref="T:KMAudio"/> to be assigned.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="loop">Whether all sounds listed should loop or not.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
            <returns>A <see cref="T:KMAudio.KMAudioRef"/> for each argument you provide.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.PlaySound(KeepCoding.Sound[])">
            <summary>
            Plays a sound, the sound source is the game object it is attached to. Requires <see cref="T:KMAudio"/> to be assigned.
            </summary>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
            <returns>A <see cref="T:KMAudio.KMAudioRef"/> for each argument you provide.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.ModulesOfBomb(KMBomb)">
            <summary>
            Allows you to get the collection of <see cref="T:KeepCoding.ModuleContainer"/> from a <see cref="T:KMBomb"/>.
            </summary>
            <remarks>
            This collection also includes vanilla modules, including <see cref="F:KeepCoding.ComponentPool.ComponentTypeEnum.Empty"/> components and <see cref="F:KeepCoding.ComponentPool.ComponentTypeEnum.Timer"/>. You can filter the collection with <see cref="P:KeepCoding.ModuleContainer.IsVanilla"/>, <see cref="P:KeepCoding.ModuleContainer.IsModded"/>, <see cref="P:KeepCoding.ModuleContainer.IsSolvable"/>, or <see cref="P:KeepCoding.ModuleContainer.IsNeedy"/>, <see cref="P:KeepCoding.ModuleContainer.IsEmptyOrTimer"/>, or <see cref="P:KeepCoding.ModuleContainer.IsModule"/>.
            </remarks>
            <param name="bomb">The instance of <see cref="T:KMBomb"/> that has modules.</param>
            <returns>All modules within <paramref name="bomb"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnDestroy">
            <summary>
            Removes the module from <see cref="E:UnityEngine.Application.logMessageReceived"/>. If you declare this method, make sure to call <c>base.OnDestroy()</c> to ensure that the module cleans up correctly.
            </summary>
        </member>
        <member name="T:KeepCoding.TPScript`1">
            <summary>
            Base class for TwitchPlays support for solvable and needy modded modules in Keep Talking and Nobody Explodes.
            </summary>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsCancelCommand">
            <summary>
            Determines if it should cancel command processing. If this returns <see langword="true"/>, then stop processing the command, clean up, then do a <c><see langword="yield"/> <see langword="return"/> <see cref="F:KeepCoding.TPScript`1.Cancelled"/>;</c> to acknowledge the cancel.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsTime">
            <summary>
            Determines if it is in Time Mode, where solves change the timer. This is useful for modules that use the timer's value.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsTimeSkippable">
            <summary>
            Determines if it should allow for the timer to be skipped when the module it is in, as well as any other modules that would like to skip time, are the only unsolved modules left on the bomb. 
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsTP">
            <summary>
            Determines if Twitch Plays is currently active. This is for modules that need to display different items, or use different rules if Twitch Plays is active.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsZen">
            <summary>
            Determines if the timer is counting up instead of down, for special cases, such as controlling how to sort button release times, or whether there is a low timer event or not.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.Help">
            <summary>
            The help message that gets sent when typing <c>!{id} help</c>.
            </summary>
        </member>
        <member name="P:KeepCoding.TPScript`1.Manual">
            <summary>
            Specifies the manual that is looked up on The Manual Repository when <c>!{id} manual</c> is entered into chat.
            </summary>
        </member>
        <member name="P:KeepCoding.TPScript`1.Abandons">
            <summary>
            This list contains modules that it should stop processing. Currently, the only module that uses this capability is Souvenir.
            </summary>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.Module">
            <summary>
            The instance of the module.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.AutoSolve">
            <summary>
            Yield return this to indicate automatically solving the module, as if it threw an exception while solving.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.CancelDetonate">
            <summary>
            Yield return this to indicate cancelling a previously issued delayed detonation command on the same module.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.Cancelled">
            <summary>
            Yield return this to indicate that you have stopped processing the command in response to the <see cref="F:KeepCoding.TPScript`1.TwitchShouldCancelCommand"/> bool being set to <see langword="true"/>.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.EndMultipleStrikes">
            <summary>
            Yield return this to indicate that the strike tracker should be enabled. If any strikes were issued during the time it was disabled, they will be awarded and the routine stopped at that point, otherwise, it will just cancel the "VoteNay Module {id} got 0 strikes! +0 strike to {Nickname}" message that would otherwise be posted. Likewise, if the module was solved at the time this command is issued, the processing will be stopped as of that point as well.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.EndWaitingMusic">
            <summary>
            Yield return this to indicate stopping the waiting music mid-command.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.HideCamera">
            <summary>
            Yield return this to hide the heads-up display and cameras while doing quaternion rotations, if it is expected that the camera/hud will get in the way.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.MultipleStrikes">
            <summary>
            Yield return this to indicate that the issued command is going to cause more than one strike, so should disable the internal strike tracker in order to avoid flooding the chat with "VoteNay Module {id} got a strike! +1 strike to {Nickname}" for as many strikes as will be awarded. This also disables the internal solve tracker as well. This allows for sending additional messages or continue processing commands regardless of the solve/strike state.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.Solve">
            <summary>
            Yield return this to indicate that this command will solve the module at some later point; all this does is tell Twitch Plays to attribute the solve to the author of this command.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.Strike">
            <summary>
            Yield return this to indicate that this command will cause a strike at some later point; all this does is tell Twitch Plays to attribute the strike to the author of this command.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.ToggleWaitingMusic">
            <summary>
            Yield return this to toggle the waiting music on and off mid-command.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.TryCancelSequence">
            <summary>
            Yield return this to indicate that the <c>KMSelectable[]</c> sequence that follows this command should be cancelled if a "!cancel" or "!stop" is issued mid-way through that sequence.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.UnsubmittablePenalty">
            <summary>
            Yield return this to indicate that the command couldn't submit an answer and should only be used to prevent users from guessing the answer. This should not be used if an answer could never be submittable for a module.
            </summary>
        </member>
        <member name="F:KeepCoding.TPScript`1.WaitingMusic">
            <summary>
            Yield return this to indicate playing the waiting music if a command will take long to finish.
            </summary>
        </member>
        <member name="M:KeepCoding.TPScript`1.ForceSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.Process(System.String)">
            <summary>
            When a command is typed into Twitch Plays with the Id of this module, it calls this method and passes in the exact command typed.
            </summary>
            <remarks>
            Anything that gets yield returned will be processed by Twitch Plays. This includes other <see cref="T:System.Collections.IEnumerable"/> methods, <see cref="T:KMSelectable"/>, an <see cref="T:System.Array"/> of <see cref="T:KMSelectable"/>, <see cref="T:System.String"/>, <c><see langword="true"/></c>, or <c><see langword="null"/></c>.
            </remarks>
            <param name="command">The user's command.</param>
            <returns>A series of instructions for the Twitch Plays mod to handle as requested by the user.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.IsMatch(System.String,System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Determines whether the input string matches the regex of the pattern.
            </summary>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="input">The test string.</param>
            <param name="pattern">The regular expression.</param>
            <param name="lenient">Whether it should add the default <c>^\s* PATTERN \s*$</c> embeded into most regex usages for Twitch Plays.</param>
            <param name="options">Any additional options for regular expressions.</param>
            <returns>True if <paramref name="input"/> passes the test of the <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.StrikeMessage(System.String)">
            <summary>
            Yield return this to allow you to tell the user why they got a strike if it isn't clear.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.TryCancel(System.String)">
            <summary>
            Yield return this to indicate that this command is allowed to be cancelled at the given time of the yield. Just know that you won't be able to clean up if you do your cancel this way, and there is a pending !cancel or !stop.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.TryWaitCancel(System.Single,System.String)">
            <summary>
            Yield return this to cause Twitch Plays to wait for the given time, and any time during the entire duration, the command may cancel. Like "trycancel", you won't be able to clean up if you cancel this way. Also like "trycancel", <paramref name="message"/> is optional.
            </summary>
            <param name="time">The amount of time to wait.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.SendToChat(System.String)">
            <summary>
            Yield return this to send a chat directly to twitch chat.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.SendToChatError(System.String)">
            <summary>
            Yield return this to send a message to the chat about why a users' command was invalid.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.SendDelayedMessage(System.Single,System.String)">
            <summary>
            Yield return this to send a message to chat after <paramref name="time"/> seconds.
            </summary>
            <param name="time">The amount of time to wait before the message gets sent.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.Detonate(System.Nullable{System.Single},System.String)">
            <summary>
            Yield return this to explode the bomb instantly. <paramref name="time"/> is specified in number of seconds before the bomb explodes. (Note, sending another detonate command will auto-cancel the previous one on the same module if it hasn't happened already.). <paramref name="message"/> is the message to send to chat upon detonation. Both of the parameters are optional.
            </summary>
            <param name="time">The amount of time before the bomb blows up.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.SkipTime(System.String)">
            <summary>
            Yield return this to try advancing the clock to the specified time. You must put the full time you wish to skip to, and this time either needs to be less than the current time, if in normal/time mode, or greater than the current time, if in zen mode. Example, if you wanted to set the clock to 5:24, then you do "skiptime 324" or "skiptime 5:24". You can target partway through the seconds, such as "skiptime 45.28", which would then set the clock to 45.28, provided that time has NOT gone by already. You must also set <see cref="P:KeepCoding.TPScript`1.IsTimeSkippable"/> to <see langword="true"/>, for this function to work.
            </summary>
            <param name="seconds">The time to skip to in seconds.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.AwardPoints(System.Int32)">
            <summary>
            Yield return this to award the user that sent the command points directly, this is currently used for mods like Souvenir to give points to users that answered the questions equally.
            </summary>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.AwardPointsOnSolve(System.Int32)">
            <summary>
            Yield return this to award the last user that sent the command points when the module is solved. The module must prevent any user from sending commands afterward in order for Twitch Plays to award points to the correct user. This is currently used by the Twin module when extra points must be given but the module is not solved immediately.
            </summary>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.UntilSolve">
            <summary>
            You can <see langword="yield"/> <see langword="return"/> this to repeatedly <see langword="yield"/> <see langword="return"/> <see langword="true"/> until the module is solved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.YieldWhile``1(``0,System.Func{System.Boolean})">
            <summary>
            You can <see langword="yield"/> <see langword="return"/> this to repeatedly <see langword="yield"/> <see langword="return"/> an item until a condition is no longer met.
            </summary>
            <param name="item">The item to yield repeatedly.</param>
            <param name="condition">The condition to repeatedly check until it returns <see langword="false"/>.</param>
            <returns><paramref name="item"/> continously until <paramref name="condition"/> is <see langword="false"/></returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.YieldUntil``1(``0,System.Func{System.Boolean})">
            <summary>
            You can <see langword="yield"/> <see langword="return"/> this to repeatedly <see langword="yield"/> <see langword="return"/> an item until a condition is met.
            </summary>
            <param name="item">The item to yield repeatedly.</param>
            <param name="condition">The condition to repeatedly check until it returns <see langword="false"/>.</param>
            <returns><paramref name="item"/> continously until <paramref name="condition"/> is <see langword="true"/></returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.OnInteractSequence(KMSelectable[],System.Single)">
            <summary>
            Presses a sequence of buttons in order of <paramref name="selectables"/>, waiting <paramref name="wait"/> seconds in-between each, and interrupting as soon as <see cref="P:KeepCoding.ModuleScript.HasStruck"/> is <see langword="true"/>.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="wait">The delay between each button press in seconds.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.OnInteractSequence(KMSelectable[],System.Single,System.Int32[])">
            <summary>
            Presses a sequence of buttons according to <paramref name="indices"/> within <paramref name="selectables"/>, waiting <paramref name="wait"/> seconds in-between each, and interrupting as soon as <see cref="P:KeepCoding.ModuleScript.HasStruck"/> is true.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="wait">The delay between each button press in seconds.</param>
            <param name="indices">The indices to press within the array.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.ProcessTwitchCommand(System.String)">
            <summary>
            This method gets grabbed by Twitch Plays. It grabs <see cref="M:KeepCoding.TPScript`1.Process(System.String)"/> and flattens it using <see cref="M:KeepCoding.Helper.Flatten(System.Collections.IEnumerator,System.Predicate{System.Collections.IEnumerator})"/>, and auto-implements the colorblind command if supported.
            </summary>
            <param name="command">The command of the user.</param>
            <returns>A list of instructions for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.TwitchHandleForcedSolve">
            <summary>
            This method gets grabbed by Twitch Plays. It grabs <see cref="M:KeepCoding.TPScript`1.ForceSolve"/> and flattens it using <see cref="M:KeepCoding.Helper.Flatten(System.Collections.IEnumerator,System.Predicate{System.Collections.IEnumerator})"/>.
            </summary>
            <returns>A list of instructions for Twitch Plays.</returns>
        </member>
        <member name="T:KeepCoding.External">
            <summary>
            Provides methods to retrieve information from other external mods.
            </summary>
        </member>
        <member name="M:KeepCoding.External.GetRuleSeedId(KeepCoding.ModuleContainer,System.Int32)">
            <summary>
            Gets the rule seed number, or a default value.
            </summary>
            <param name="module">The module to retrieve the id from.</param>
            <param name="editorValue">The value to <see langword="return"/> if played on the Unity Editor.</param>
            <returns>If successful, the rule seed's number that is used as the seed in <see cref="T:KeepCoding.MonoRandom"/>. The default value is 1, or <paramref name="editorValue"/> if played in the Unity Editor.</returns>
        </member>
        <member name="M:KeepCoding.External.GetIgnoredModules(KeepCoding.ModuleContainer)">
            <summary>
            Retrieves the ignore list from the Boss Module Manager mod used primarily by boss modules.
            </summary>
            <param name="module">The module to retrieve the name from.</param>
            <returns>If successful, the boss module's ignore list, otherwise a new empty string array.</returns>
        </member>
        <member name="T:KeepCoding.Game">
            <summary>
            Allows access into the game's internal code. 
            </summary>
            <remarks>
            On the Editor, these properties will return default values. Check the XML documentation to see the value it returns.
            </remarks>
        </member>
        <member name="T:KeepCoding.Game.KTInputManager">
            <summary>
            Allows access relating to how the game is being interacted with.
            </summary>
        </member>
        <member name="P:KeepCoding.Game.KTInputManager.IsCurrentControlTypeVR">
            <summary>
            Determines if the current way the game is being controlled is VR-related.
            </summary>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.KTInputManager.CurrentControlType">
            <summary>
            The current way the game is being controlled.
            </summary>
            <remarks>
            Default: <see cref="F:KeepCoding.Game.ControlType.Mouse"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="T:KeepCoding.Game.MasterAudio">
            <summary>
            Allows access relating to the game's main master channel for audio.
            </summary>
        </member>
        <member name="M:KeepCoding.Game.MasterAudio.IsGroupInfo(System.String,System.String)">
            <summary>
            Determines whether a given string has a group info.
            </summary>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="source">The source of the sound, which is typically the assembly name which uses the bundle that contains the sound.</param>
            <param name="sound">The name of the sound.</param>
            <returns><see langword="true"/> if <paramref name="source"/> with <paramref name="sound"/> has a group info, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:KeepCoding.Game.MasterAudio.GroupInfo(System.String,System.String)">
            <summary>
            Gets the group info of a given string. To prevent a reference to the game, the type is boxed in <see cref="T:System.Object"/>. You can cast it to AudioGroupInfo type to restore its functionality.
            </summary>
            <remarks>
            Default: Returns the <see cref="T:System.String"/> argument given boxed as <see cref="T:System.Object"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="source">The source of the sound, which is typically the assembly name which uses the bundle that contains the sound.</param>
            <param name="sound">The name of the sound.</param>
            <returns>The <see cref="T:System.Object"/> which contains the GroupInfo of the desired <paramref name="source"/> and <paramref name="sound"/>, or <see langword="null"/> if no such GroupInfo exists.</returns>
        </member>
        <member name="T:KeepCoding.Game.Mission">
            <summary>
            Allows access relating to the current mission.
            </summary>
        </member>
        <member name="P:KeepCoding.Game.Mission.IsPacingEvents">
            <summary>
            Determines whether or not all pacing events are enabled. Default: <see langword="false"/>.
            </summary>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.Mission.Description">
            <summary>
            The description as it appears in the bomb binder.
            </summary>
            <remarks>
            Default: "Everybody has to start somewhere. Let's just hope it doesn't end here too.\n\nMake sure your experts have the manual and are ready to help.".
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.Mission.DisplayName">
            <summary>
            The mission name as it appears in the bomb binder.
            </summary>
            <remarks>
            Default: "The First Bomb"
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.Mission.ID">
            <summary>
            The ID of the mission.
            </summary>
            <remarks>
            Default: "firsttime"
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.Mission.GeneratorSetting">
            <summary>
            Gets the generator setting of the mission.
            </summary>
            <remarks>
            New instance of <see cref="P:KeepCoding.Game.Mission.GeneratorSetting"/>, default constructor.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="T:KeepCoding.Game.PlayerSettings">
            <summary>
            Allows access into the player settings from the game. Do not use this class in the unity editor. 
            </summary>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.InvertTiltControls">
            <summary>
            Determines if vertical tilting is flipped or not.
            </summary>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.LockMouseToWindow">
            <summary>
            Determines if the option to lock the mouse to the window is enabled.
            </summary>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.ShowLeaderBoards">
            <summary>
            Determines if the option to show the leaderboards from the pamphlet.
            </summary>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.ShowRotationUI">
            <summary>
            Determines if the option to show the rotation of the User Interface is enabled.
            </summary>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.ShowScanline">
            <summary>
            Determines if the option to show scanlines is enabled.
            </summary>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.SkipTitleScreen">
            <summary>
            Determines if the option to skip the title screen is enabled.
            </summary>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.RumbleEnabled">
            <summary>
            Determines if the VR or regular controllers vibrate.
            </summary>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.TouchpadInvert">
            <summary>
            Determines if the touchpad controls are inverted.
            </summary>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.UseModsAlways">
            <summary>
            Determines if the option to always use mods is enabled.
            </summary>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.UseParallelModLoading">
            <summary>
            Determines if the option to use parallel/simultaneous mod loading is enabled.
            </summary>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.VRModeRequested">
            <summary>
            Determines if VR mode is requested.
            </summary>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.AntiAliasing">
            <summary>
            The intensity of anti-aliasing currently on the game. Ranges 0 to 8.
            </summary>
            <remarks>
            Default: 8.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.MusicVolume">
            <summary>
            The current music volume from the dossier menu. Ranges 0 to 100.
            </summary>
            <remarks>
            Default: 100.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.SFXVolume">
            <summary>
            The current sound effects volume from the dosssier menu. Ranges 0 to 100.
            </summary>
            <remarks>
            Default: 100.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.VSync">
            <summary>
            Determines if VSync is on or off.
            </summary>
            <remarks>
            Default: 1.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.LanguageCode">
            <summary>
            The current language code.
            </summary>
            <remarks>
            Default: "en".
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
        </member>
        <member name="T:KeepCoding.Game.ControlType">
            <summary>
            Determines how the game is controlled.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Gamepad">
            <summary>
            The game is being controlled with a gamepad controller.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Gaze">
            <summary>
            The game is being controlled with a virtual reality headset.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Mouse">
            <summary>
            The game is being controlled with a mouse.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Motion">
            <summary>
            The game is being controlled with virtual reality headset and controller.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Touch">
            <summary>
            The game is being controlled with touch controls.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ControlType.ThreeDOF">
            <summary>
            The game is being controlled with three degrees of freedom, part of virtual reality.
            </summary>
        </member>
        <member name="T:KeepCoding.Game.ModSourceEnum">
            <summary>
            Determines how the mod is stored.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ModSourceEnum.Invalid">
            <summary>
            The mod is invalid.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ModSourceEnum.Local">
            <summary>
            The mod is stored within the local mods folder.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ModSourceEnum.SteamWorkshop">
            <summary>
            The mod is stored within the workshop folder.
            </summary>
        </member>
        <member name="T:KeepCoding.Game.References">
            <summary>
            Determines what references are used within this class.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.References.None">
            <summary>
            Implies that no reference should be used, and default values are returned.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.References.Ktane">
            <summary>
            Implies that the Assembly-CSharp.dll from Keep Talking and Nobody Explodes be used, and its values are returned.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.References.KtaneRewritten">
            <summary>
            Implies that the library from TheDarkSid3r's Keep Talking and Nobody Explodes Rewritten be used, and its values are returned.
            </summary>
        </member>
        <member name="M:KeepCoding.Game.AddStrikes(KMBomb,System.Int32,System.Boolean)">
            <summary>
            Adds an amount of strikes on the bomb, and returns the bomb object used, or <see langword="null"/>.
            </summary>
            <remarks>
            Default: Internal Logger method call.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="bomb">The <see cref="T:KMBomb"/> component which is attached to the inner Bomb component.</param>
            <param name="strikeDelta">The amount of strikes to add.</param>
            <param name="allowExplosion">Whether it should check whether the bomb should explode from strikes.</param>
            <returns>The bomb <see cref="T:System.Object"/> of the bomb used to assign strikes.</returns>
        </member>
        <member name="M:KeepCoding.Game.SetStrikes(KMBomb,System.Int32,System.Boolean)">
            <summary>
            Sets the amount of strikes on the bomb, and returns the bomb object used, or <see langword="null"/>.
            </summary>
            <remarks>
            Default: Internal Logger method call.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="bomb">The <see cref="T:KMBomb"/> component which is attached to the inner Bomb component.</param>
            <param name="newStrikes">The strikes to set.</param>
            <param name="allowExplosion">Whether it should check whether the bomb should explode from strikes.</param>
            <returns>The bomb <see cref="T:System.Object"/> of the bomb used to assign strikes.</returns>
        </member>
        <member name="M:KeepCoding.Game.Bomb(KMBomb)">
            <summary>
            Gets the game's internal bomb component, not to be mistaken with <see cref="T:KMBomb"/>. To prevent a reference to the game, the type is boxed in <see cref="T:System.Object"/>. You can cast it to Bomb or <see cref="T:UnityEngine.MonoBehaviour"/> type to restore its functionality.
            </summary>
            <remarks>
            Default: An encapsulated method that takes a <see cref="T:UnityEngine.GameObject"/> and always returns the argument passed in.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="bomb">The <see cref="T:KMBomb"/> instance that is on the same <see cref="T:UnityEngine.GameObject"/> as the Bomb component.</param>
            <returns>The internal Bomb <see cref="T:UnityEngine.Component"/> that the game uses.</returns>
        </member>
        <member name="M:KeepCoding.Game.Timer(KMBomb)">
            <summary>
            Gets the game's internal timer component. To prevent a reference to the game, the type is boxed in <see cref="T:System.Object"/>. You can cast it to TimerComponent or <see cref="T:UnityEngine.MonoBehaviour"/> type to restore its functionality.
            </summary>
            <remarks>
            Default: An encapsulated method that takes a <see cref="T:UnityEngine.GameObject"/> and always returns the argument passed in.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="bomb">The <see cref="T:KMBomb"/> instance that is on the same <see cref="T:UnityEngine.GameObject"/> as the Bomb component, which is needed to access the Timer component.</param>
            <returns>The internal Timer <see cref="T:UnityEngine.Component"/> that the game uses.</returns>
        </member>
        <member name="M:KeepCoding.Game.Vanillas(KMBomb)">
            <summary>
            Gets all of the vanilla modules from the bomb supplied, including needies. To prevent a reference to the game, the type is boxed in an <see cref="T:System.Object"/> <see cref="T:System.Array"/>. You can cast it to BombComponent type to restore its functionality.
            </summary>
            <remarks>
            Default: An encapsulated method that takes a <see cref="T:UnityEngine.GameObject"/> and always returns an empty <see cref="T:System.Object"/> <see cref="T:System.Array"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.Internal.UnrecognizedValueException"></exception>
            <param name="bomb">The <see cref="T:KMBomb"/> instance that is the parent <see cref="T:UnityEngine.GameObject"/> to all vanilla modules.</param>
            <returns>All vanilla modules on the current <paramref name="bomb"/>.</returns>
        </member>
        <member name="P:KeepCoding.Game.Reference">
            <summary>
            Determines what reference this library should use for the current class. This value can only be modified by the libraries featured in <see cref="T:KeepCoding.Game.References"/>, a <see cref="T:System.Security.SecurityException"/> is thrown when this is attempted regardless.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="T:KeepCoding.PathManager">
            <summary>
            Allows loading external information stored on the module. Default values are returned either when run on the editor or when an <see cref="T:System.IO.IOException"/> and similar occur. The default values are specified in the remarks of each method.
            </summary>
        </member>
        <member name="P:KeepCoding.PathManager.Version">
            <summary>
            Gets this library's version number. Currently used by <see cref="T:KeepCoding.ModuleScript"/> to log the version number of this library.
            </summary>
            <remarks>
            If you want the version number of your modules, refer to <see cref="P:KeepCoding.ModuleScript.Version"/> instead, or <see cref="M:KeepCoding.PathManager.GetModInfo"/>.
            </remarks>
        </member>
        <member name="M:KeepCoding.PathManager.LoadLibrary(System.String)">
            <summary>
            Loads a library from the directory of the mod caller.
            </summary>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="name">The library's name, excluding the extension.</param>
        </member>
        <member name="M:KeepCoding.PathManager.LoadLibrary(System.String,System.String)">
            <summary>
            Loads a library from the directory of the specified mod's assembly name.
            </summary>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="name">The library's name, excluding the extension.</param>
            <param name="assembly">The mod's assembly name.</param>
        </member>
        <member name="M:KeepCoding.PathManager.GetDirectory">
            <summary>
            Finds the directory of the mod caller.
            </summary>
            <remarks>
            Default: An empty <see cref="T:System.String"/>.
            </remarks>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <returns>The directory to the mod caller.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetDirectory(System.String)">
            <summary>
            Finds the directory of the specified mod's assembly name.
            </summary>
            <remarks>
            Default: An empty <see cref="T:System.String"/>.
            </remarks>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="assembly">The mod assembly's name.</param>
            <returns>The directory to <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetPath(System.String)">
            <summary>
            Finds the path of a given file within the mod caller. You need to specify the extensions of the file too, otherwise the file cannot be found.
            </summary>
            <remarks>
            Default: An empty <see cref="T:System.String"/>.
            </remarks>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="file">The file to search for. Make sure to include extensions!</param>
            <returns>The path to <paramref name="file"/> within the mod caller directory.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetPath(System.String,System.String)">
            <summary>
            Finds the path of a given file within a specified mod's assembly name. You need to specify the extensions of the file too, otherwise the file cannot be found.
            </summary>
            <remarks>
            Default: An empty <see cref="T:System.String"/>.
            </remarks>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="file">The file to search for. Make sure to include extensions!</param>
            <param name="assembly">The mod assembly's name.</param>
            <returns>The path to <paramref name="file"/> within <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetModInfo">
            <summary>
            Deserializes the modInfo.json of the mod caller.
            </summary>
            <remarks>
            Default: A new instance of <see cref="T:KeepCoding.ModInfo"/> with <see keyword="default"/> values.
            </remarks>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:Newtonsoft.Json.JsonException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <returns>A <see cref="T:KeepCoding.ModInfo"/> from the mod caller's modInfo.json file.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetModInfo(System.String)">
            <summary>
            Deserializes the modInfo.json of a specified mod's assembly name.
            </summary>
            <remarks>
            Default: A new instance of <see cref="T:KeepCoding.ModInfo"/> with <see keyword="default"/> values.
            </remarks>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:Newtonsoft.Json.JsonException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <param name="assembly">The mod assembly's name.</param>
            <returns>A <see cref="T:KeepCoding.ModInfo"/> from <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetAssets``1(System.String)">
            <summary>
            Retrieves assets of a specific type from a bundle file within the mod caller.
            </summary>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of asset to retrieve.</typeparam>
            <param name="file">The name of the bundle file to grab the assets from.</param>
            <returns>The assets retrieved from the mod caller.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetAssets``1(System.String,System.String)">
            <summary>
            Retrieves assets of a specific type from a bundle file within a specified mod's assembly name.
            </summary>
            <exception cref="T:KeepCoding.Internal.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.Internal.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of asset to retrieve.</typeparam>
            <param name="file">The name of the bundle file to grab the assets from.</param>
            <param name="assembly">The mod assembly's name.</param>
            <returns>The assets retrieved from <paramref name="assembly"/>.</returns>
        </member>
    </members>
</doc>
